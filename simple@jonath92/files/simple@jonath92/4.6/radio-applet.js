var radioApplet;(()=>{"use strict";var __webpack_modules__={397:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"main\": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/consts.ts\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nconst { get_home_dir } = imports.gi.GLib;\nconst APPLET_SITE = 'https://cinnamon-spices.linuxmint.com/applets/view/297';\nconst DEFAULT_TOOLTIP_TXT = 'Radio++';\nconst CONFIG_DIR = `${get_home_dir()}/.cinnamon/configs/${__meta.uuid}`;\nconst MPRIS_PLUGIN_PATH = CONFIG_DIR + '/.mpris.so';\nconst MPRIS_PLUGIN_URL = \"https://github.com/hoyon/mpv-mpris/releases/download/0.5/mpris.so\";\nconst MEDIA_PLAYER_2_NAME = \"org.mpris.MediaPlayer2\";\nconst MEDIA_PLAYER_2_PLAYER_NAME = \"org.mpris.MediaPlayer2.Player\";\nconst MEDIA_PLAYER_2_PATH = \"/org/mpris/MediaPlayer2\";\nconst MPV_MPRIS_BUS_NAME = `${MEDIA_PLAYER_2_NAME}.mpv`;\nconst MPV_CVC_NAME = 'mpv Media Player';\nconst MAX_STRING_LENGTH = 40;\n/** in percent */\nconst MAX_VOLUME = 100; // see https://github.com/linuxmint/cinnamon-spices-applets/issues/3402#issuecomment-756430754 for an explanation of this value\n/** in percent */\nconst VOLUME_DELTA = 5;\n// STYLE CLASSES \nconst POPUP_ICON_CLASS = 'popup-menu-icon';\nconst POPUP_MENU_ITEM_CLASS = 'popup-menu-item';\n// ICONS\nfunction getVolumeIcon(args) {\n    const { volume } = args;\n    const VOLUME_ICON_PREFIX = 'audio-volume';\n    const VOLUME_ICONS = [\n        { max: 0, name: `${VOLUME_ICON_PREFIX}-muted` },\n        { max: 33, name: `${VOLUME_ICON_PREFIX}-low` },\n        { max: 66, name: `${VOLUME_ICON_PREFIX}-medium` },\n        { max: 100, name: `${VOLUME_ICON_PREFIX}-high` },\n    ];\n    if (volume < 0 || volume > 100)\n        throw new RangeError('volume should be between 0 and 100');\n    const index = VOLUME_ICONS.findIndex((_a) => {\n        var { max } = _a, rest = __rest(_a, [\"max\"]);\n        return volume <= max;\n    });\n    return VOLUME_ICONS[index].name;\n}\nconst RADIO_SYMBOLIC_ICON_NAME = 'radioapplet';\nconst PLAYBACK_ICON_PREFIX = 'media-playback';\nconst PLAY_ICON_NAME = `${PLAYBACK_ICON_PREFIX}-start`;\nconst PAUSE_ICON_NAME = `${PLAYBACK_ICON_PREFIX}-pause`;\nconst STOP_ICON_NAME = `${PLAYBACK_ICON_PREFIX}-stop`;\nconst SONG_INFO_ICON_NAME = 'audio-x-generic';\nconst COPY_ICON_NAME = 'edit-copy';\nconst DOWNLOAD_ICON_NAME = 'south-arrow-weather-symbolic';\nconst LOADING_ICON_NAME = 'view-refresh-symbolic';\n\n;// CONCATENATED MODULE: ./src/ui/Applet/AppletIcon.ts\n\nconst { Icon, IconType } = imports.gi.St;\nconst { IconType: IconTypeEnum } = imports.gi.St;\nfunction createAppletIcon(args) {\n    const { panel, locationLabel } = args;\n    let playbackStatus;\n    const playbackStatusStyleMap = new Map([\n        ['Stopped', ' '],\n        ['Loading', ' ']\n    ]);\n    const icon = new Icon({});\n    let normalIconType;\n    // the icon type passed from outside is overriten when the playbackstatus is 'loading' \n    function setIconTypeInternal(iconTypeEnum, iconName) {\n        icon.style_class = iconTypeEnum === IconTypeEnum.SYMBOLIC ?\n            'system-status-icon' : 'applet-icon';\n        icon.icon_name = iconName;\n        icon.icon_type = iconTypeEnum;\n        icon.icon_size = panel.getPanelZoneIconSize(locationLabel, iconTypeEnum);\n    }\n    function setIconType(iconType) {\n        if (!iconType)\n            return;\n        let iconTypeEnum;\n        let iconName;\n        normalIconType = iconType;\n        if (iconType === 'SYMBOLIC') {\n            iconName = RADIO_SYMBOLIC_ICON_NAME;\n            iconTypeEnum = IconTypeEnum.SYMBOLIC;\n        }\n        else {\n            iconName = `radioapplet-${iconType.toLowerCase()}`;\n            iconTypeEnum = IconTypeEnum.FULLCOLOR;\n        }\n        setIconTypeInternal(iconTypeEnum, iconName);\n    }\n    function updateIconSize() {\n        const iconSize = panel.getPanelZoneIconSize(locationLabel, icon.icon_type);\n        icon.icon_size = iconSize;\n    }\n    function setColorWhenPaused(color) {\n        playbackStatusStyleMap.set('Paused', `color: ${color}`);\n        if (playbackStatus)\n            setPlaybackStatus(playbackStatus);\n    }\n    function setColorWhenPlaying(color) {\n        playbackStatusStyleMap.set('Playing', `color: ${color}`);\n        if (playbackStatus)\n            setPlaybackStatus(playbackStatus);\n    }\n    function setPlaybackStatus(newPlaybackStatus) {\n        playbackStatus = newPlaybackStatus;\n        const style = playbackStatusStyleMap.get(playbackStatus);\n        if (newPlaybackStatus === 'Loading') {\n            setIconTypeInternal(IconTypeEnum.SYMBOLIC, LOADING_ICON_NAME);\n        }\n        else {\n            setIconType(normalIconType);\n        }\n        if (!style)\n            return;\n        icon.set_style(style);\n    }\n    return {\n        actor: icon,\n        setPlaybackStatus,\n        setColorWhenPlaying,\n        setColorWhenPaused,\n        setIconType,\n        updateIconSize\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Applet/Applet.ts\nconst { Applet, AllowedLayout } = imports.ui.applet;\nconst { Bin } = imports.gi.St;\nconst { EventType } = imports.gi.Clutter;\nfunction createApplet(args) {\n    const { orientation, panelHeight, instanceId, icon, label, onClick, onScroll, onMiddleClick, onAppletMoved, onAppletRemoved, onRightClick } = args;\n    const applet = new Applet(orientation, panelHeight, instanceId);\n    let appletReloaded = false;\n    [icon, label].forEach(widget => {\n        applet.actor.add_child(widget);\n    });\n    applet.on_applet_clicked = onClick;\n    applet.on_applet_middle_clicked = onMiddleClick;\n    applet.setAllowedLayout(AllowedLayout.BOTH);\n    applet.on_applet_reloaded = function () {\n        appletReloaded = true;\n    };\n    applet.on_applet_removed_from_panel = function () {\n        appletReloaded ? onAppletMoved() : onAppletRemoved();\n        appletReloaded = false;\n    };\n    applet.actor.connect('event', (actor, event) => {\n        if (event.type() !== EventType.BUTTON_PRESS)\n            return;\n        if (event.get_button() === 3) {\n            onRightClick();\n        }\n    });\n    applet.actor.connect('scroll-event', (actor, event) => {\n        onScroll(event.get_scroll_direction());\n    });\n    return applet;\n}\n\n;// CONCATENATED MODULE: ./src/mpv/MpvHandler.ts\n\nconst { getDBusProperties, getDBus, getDBusProxyWithOwner } = imports.misc.interfaces;\nconst { spawnCommandLine } = imports.misc.util;\n// see https://lazka.github.io/pgi-docs/Cvc-1.0/index.html\nconst { MixerControl } = imports.gi.Cvc;\nfunction createMpvHandler(args) {\n    const { onPlaybackstatusChanged, onUrlChanged, onVolumeChanged, onTitleChanged, onLengthChanged, onPositionChanged, checkUrlValid, lastUrl, getInitialVolume, } = args;\n    const dbus = getDBus();\n    const mediaServerPlayer = getDBusProxyWithOwner(MEDIA_PLAYER_2_PLAYER_NAME, MPV_MPRIS_BUS_NAME);\n    const mediaProps = getDBusProperties(MPV_MPRIS_BUS_NAME, MEDIA_PLAYER_2_PATH);\n    const control = new MixerControl({ name: __meta.name });\n    let cvcStream;\n    control.open();\n    control.connect('stream-added', (ctrl, id) => {\n        const addedStream = control.lookup_stream_id(id);\n        if ((addedStream === null || addedStream === void 0 ? void 0 : addedStream.name) !== MPV_CVC_NAME)\n            return;\n        cvcStream = addedStream;\n        cvcStream.connect('notify::volume', () => {\n            handleCvcVolumeChanged();\n        });\n    });\n    // When no last Url is passed and mpv is running, it is assumed that mpv is not used for the radio applet (and therefore the playbackstatus is Stopped)\n    const initialPlaybackStatus = !lastUrl ? 'Stopped' : getPlaybackStatus();\n    let currentUrl = initialPlaybackStatus !== \"Stopped\" ? lastUrl : null;\n    let currentLength = getLength(); // in seconds\n    let positionTimerId;\n    let bufferExceeded = false;\n    let mediaPropsListenerId;\n    let seekListenerId;\n    if (initialPlaybackStatus !== \"Stopped\") {\n        activateMprisPropsListener();\n        activeSeekListener();\n        onUrlChanged(currentUrl);\n        onPlaybackstatusChanged(initialPlaybackStatus);\n        onVolumeChanged(getVolume());\n        onTitleChanged(getCurrentTitle());\n        onLengthChanged(currentLength);\n        onPositionChanged(getPosition());\n        startPositionTimer();\n    }\n    const nameOwnerSignalId = dbus.connectSignal('NameOwnerChanged', (...args) => {\n        const name = args[2][0];\n        const oldOwner = args[2][1];\n        const newOwner = args[2][2];\n        if (name !== MPV_MPRIS_BUS_NAME)\n            return;\n        if (newOwner) {\n            activateMprisPropsListener();\n            activeSeekListener();\n            pauseAllOtherMediaPlayers();\n        }\n        if (oldOwner) {\n            currentLength = 0;\n            stopPositionTimer();\n            mediaProps.disconnectSignal(mediaPropsListenerId);\n            mediaServerPlayer.disconnectSignal(seekListenerId);\n            mediaPropsListenerId = seekListenerId = currentUrl = null;\n            onPlaybackstatusChanged('Stopped');\n        }\n    });\n    function deactivateAllListener() {\n        dbus.disconnectSignal(nameOwnerSignalId);\n        if (mediaPropsListenerId)\n            mediaProps === null || mediaProps === void 0 ? void 0 : mediaProps.disconnectSignal(mediaPropsListenerId);\n        if (seekListenerId)\n            mediaServerPlayer === null || mediaServerPlayer === void 0 ? void 0 : mediaServerPlayer.disconnectSignal(seekListenerId);\n    }\n    function activateMprisPropsListener() {\n        mediaPropsListenerId = mediaProps.connectSignal('PropertiesChanged', (proxy, nameOwner, [interfaceName, props]) => {\n            var _a, _b, _c, _d, _e, _f;\n            // theoretically it could be used recursiveUnpack but this doesn't work on cinnamon 20 yet (but on 20.1)\n            const metadata = (_a = props.Metadata) === null || _a === void 0 ? void 0 : _a.deep_unpack();\n            const volume = (_b = props.Volume) === null || _b === void 0 ? void 0 : _b.unpack();\n            const playbackStatus = (_c = props.PlaybackStatus) === null || _c === void 0 ? void 0 : _c.unpack();\n            //global.log(`metadata: ${JSON.stringify(props.Metadata?.recursiveUnpack())}, playbackStatus: ${playbackStatus}, volume: ${volume}`)\n            const url = (_d = metadata === null || metadata === void 0 ? void 0 : metadata['xesam:url']) === null || _d === void 0 ? void 0 : _d.unpack();\n            const title = (_e = metadata === null || metadata === void 0 ? void 0 : metadata['xesam:title']) === null || _e === void 0 ? void 0 : _e.unpack();\n            const length = (_f = metadata === null || metadata === void 0 ? void 0 : metadata[\"mpris:length\"]) === null || _f === void 0 ? void 0 : _f.unpack();\n            const newUrlValid = checkUrlValid(url);\n            const relevantEvent = newUrlValid || currentUrl;\n            if (!relevantEvent)\n                return; // happens when mpv is running with a file/stream not managed by the applet\n            if (length != null)\n                handleLengthChanged(length);\n            if (volume != null)\n                handleMprisVolumeChanged(volume);\n            playbackStatus && handleMprisPlaybackStatusChanged(playbackStatus);\n            url && newUrlValid && url !== currentUrl && handleUrlChanged(url);\n            title && handleTitleSet(title);\n        });\n    }\n    function activeSeekListener() {\n        seekListenerId = mediaServerPlayer.connectSignal('Seeked', (id, sender, value) => {\n            handlePositionChanged(microSecondsToRoundedSeconds(value));\n        });\n    }\n    /** @param length in microseconds */\n    function handleLengthChanged(length) {\n        const lengthInSeconds = microSecondsToRoundedSeconds(length);\n        onLengthChanged(lengthInSeconds);\n        const startLoading = (length === 0);\n        const finishedLoading = length !== 0 && currentLength === 0;\n        currentLength = lengthInSeconds;\n        if (startLoading) {\n            onPlaybackstatusChanged('Loading');\n        }\n        if (finishedLoading || bufferExceeded) {\n            const position = finishedLoading ? 0 : getPosition();\n            handlePositionChanged(position);\n            onPlaybackstatusChanged(getPlaybackStatus());\n            bufferExceeded = false;\n        }\n    }\n    /**  @param position in seconds! */\n    function handlePositionChanged(position) {\n        stopPositionTimer();\n        onPositionChanged(position);\n        startPositionTimer();\n    }\n    function startPositionTimer() {\n        if (getPlaybackStatus() !== 'Playing')\n            return;\n        positionTimerId = setInterval(() => {\n            const position = Math.min(getPosition(), currentLength);\n            onPositionChanged(position);\n            if (position === currentLength) {\n                onPlaybackstatusChanged('Loading');\n                bufferExceeded = true;\n                stopPositionTimer();\n            }\n        }, 1000);\n    }\n    function stopPositionTimer() {\n        if (!positionTimerId)\n            return;\n        clearInterval(positionTimerId);\n        positionTimerId = null;\n    }\n    function handleMprisPlaybackStatusChanged(playbackStatus) {\n        if (currentLength !== 0) {\n            onPlaybackstatusChanged(playbackStatus);\n            playbackStatus === 'Paused' ? stopPositionTimer()\n                : handlePositionChanged(getPosition());\n        }\n    }\n    function handleUrlChanged(newUrl) {\n        currentUrl = newUrl;\n        handleLengthChanged(0);\n        if (positionTimerId)\n            stopPositionTimer();\n        onPositionChanged(0);\n        onUrlChanged(newUrl);\n    }\n    function handleMprisVolumeChanged(mprisVolume) {\n        if (mprisVolume * 100 > MAX_VOLUME) {\n            mediaServerPlayer.Volume = MAX_VOLUME / 100;\n            return;\n        }\n        const normalizedVolume = Math.round(mprisVolume * 100);\n        setCvcVolume(normalizedVolume);\n        onVolumeChanged(normalizedVolume);\n    }\n    function handleCvcVolumeChanged() {\n        const normalizedVolume = Math.round(cvcStream.volume / control.get_vol_max_norm() * 100);\n        setMprisVolume(normalizedVolume);\n    }\n    function handleTitleSet(title) {\n        onTitleChanged(title);\n    }\n    /** @returns length in seconds */\n    function getLength() {\n        var _a, _b;\n        const lengthMicroSeconds = ((_b = (_a = mediaServerPlayer.Metadata) === null || _a === void 0 ? void 0 : _a[\"mpris:length\"]) === null || _b === void 0 ? void 0 : _b.unpack()) || 0;\n        return microSecondsToRoundedSeconds(lengthMicroSeconds);\n    }\n    /** @returns position in seconds */\n    function getPosition() {\n        if (getPlaybackStatus() === 'Stopped')\n            return 0;\n        // for some reason, this only return the right value the first time it is called. When calling this multiple times, it returns always the same value which however is wrong when radio is playing\n        // const positionMicroSeconds = mediaServerPlayer.Position\n        const positionMicroSeconds = mediaProps.GetSync('org.mpris.MediaPlayer2.Player', 'Position')[0].deep_unpack();\n        return microSecondsToRoundedSeconds(positionMicroSeconds);\n    }\n    function setUrl(url) {\n        if (getPlaybackStatus() === 'Stopped') {\n            const initialVolume = getInitialVolume();\n            if (initialVolume == null) {\n                throw new Error('initial Volume must not be undefined or null');\n            }\n            const command = `mpv --script=${MPRIS_PLUGIN_PATH} ${url} \n                --volume=${initialVolume}`;\n            spawnCommandLine(command);\n            return;\n        }\n        mediaServerPlayer.OpenUriRemote(url);\n        mediaServerPlayer.PlaySync();\n    }\n    function increaseDecreaseVolume(volumeChange) {\n        // newVolume is the current Volume plus(or minus) volumeChange \n        // but at least 0 and maximum Max_Volume\n        const newVolume = Math.min(MAX_VOLUME, Math.max(0, getVolume() + volumeChange));\n        setMprisVolume(newVolume);\n    }\n    /** @param newVolume volume in percent */\n    function setMprisVolume(newVolume) {\n        if (getVolume() === newVolume || getPlaybackStatus() === 'Stopped')\n            return;\n        mediaServerPlayer.Volume = newVolume / 100;\n    }\n    /** @param newVolume volume in percent */\n    function setCvcVolume(newVolume) {\n        const newStreamVolume = newVolume / 100 * control.get_vol_max_norm();\n        if (!cvcStream)\n            return;\n        if (cvcStream.volume === newStreamVolume)\n            return;\n        cvcStream.is_muted && cvcStream.change_is_muted(false);\n        cvcStream.volume = newStreamVolume;\n        cvcStream.push_volume();\n    }\n    function togglePlayPause() {\n        if (getPlaybackStatus() === \"Stopped\")\n            return;\n        mediaServerPlayer.PlayPauseSync();\n    }\n    function stop() {\n        if (getPlaybackStatus() === \"Stopped\")\n            return;\n        mediaServerPlayer.StopSync();\n    }\n    function getCurrentTitle() {\n        if (getPlaybackStatus() === \"Stopped\")\n            return;\n        return mediaServerPlayer.Metadata[\"xesam:title\"].unpack();\n    }\n    /**\n     * pauses all MediaPlayers with MPRIS Support except mpv\n     */\n    function pauseAllOtherMediaPlayers() {\n        dbus.ListNamesSync()[0].forEach(busName => {\n            if (!busName.includes(MEDIA_PLAYER_2_NAME) || busName === MPV_MPRIS_BUS_NAME)\n                return;\n            const nonMpvMediaServerPlayer = getDBusProxyWithOwner(MEDIA_PLAYER_2_PLAYER_NAME, busName);\n            nonMpvMediaServerPlayer.PauseSync();\n        });\n    }\n    function getPlaybackStatus() {\n        // this is necessary because when a user stops mpv and afterwards start vlc (or maybe also an other media player), mediaServerPlayer.PlaybackStatus wrongly returns \"Playing\"  \n        const mpvRunning = dbus.ListNamesSync()[0].includes(MPV_MPRIS_BUS_NAME);\n        return mpvRunning ? mediaServerPlayer.PlaybackStatus : 'Stopped';\n    }\n    function getVolume() {\n        if (getPlaybackStatus() === 'Stopped')\n            return null;\n        return Math.round(mediaServerPlayer.Volume * 100);\n    }\n    function microSecondsToRoundedSeconds(microSeconds) {\n        const seconds = microSeconds / 1000000;\n        const secondsRounded = Math.round(seconds);\n        return secondsRounded;\n    }\n    /** @param newPosition in seconds */\n    function setPosition(newPosition) {\n        const positioninMicroSeconds = Math.min(newPosition * 1000000, currentLength * 1000000);\n        const trackId = mediaServerPlayer.Metadata['mpris:trackid'].unpack();\n        mediaServerPlayer === null || mediaServerPlayer === void 0 ? void 0 : mediaServerPlayer.SetPositionRemote(trackId, positioninMicroSeconds);\n    }\n    return {\n        increaseDecreaseVolume,\n        setVolume: setMprisVolume,\n        setUrl,\n        togglePlayPause,\n        stop,\n        getCurrentTitle,\n        setPosition,\n        deactivateAllListener,\n        // it is very confusing but dbus must be returned!\n        // Otherwilse all listeners stop working after about 20 seconds which is fucking difficult to debug\n        dbus\n    };\n}\n\n;// CONCATENATED MODULE: ./src/Config.ts\nconst { AppletSettings } = imports.ui.settings;\nconst createConfig = (args) => {\n    const { uuid, instanceId, onIconChanged, onIconColorPlayingChanged, onIconColorPausedChanged, onChannelOnPanelChanged, onMyStationsChanged, } = args;\n    // all settings are saved to this object\n    const settingsObject = {\n        get initialVolume() { return getInitialVolume(); }\n    };\n    const appletSettings = new AppletSettings(settingsObject, uuid, instanceId);\n    appletSettings.bind('icon-type', 'iconType', (iconType) => onIconChanged(iconType));\n    appletSettings.bind('color-on', 'symbolicIconColorWhenPlaying', (newColor) => onIconColorPlayingChanged(newColor));\n    appletSettings.bind('color-paused', 'symbolicIconColorWhenPaused', (newColor) => onIconColorPausedChanged(newColor));\n    appletSettings.bind('channel-on-panel', 'channelNameOnPanel', (channelOnPanel) => onChannelOnPanelChanged(channelOnPanel));\n    appletSettings.bind('keep-volume-between-sessions', \"keepVolume\");\n    appletSettings.bind('initial-volume', 'customInitVolume');\n    appletSettings.bind('last-volume', 'lastVolume');\n    appletSettings.bind('tree', \"userStations\", onMyStationsChanged);\n    appletSettings.bind('last-url', 'lastUrl');\n    appletSettings.bind('music-download-dir-select', 'musicDownloadDir', () => handleMusicDirChanged());\n    function getInitialVolume() {\n        const { keepVolume, lastVolume, customInitVolume } = settingsObject;\n        let initialVolume = keepVolume ? lastVolume : customInitVolume;\n        if (initialVolume == null) {\n            global.logWarning('initial Volume was null or undefined. Applying 50 as a fallback solution to prevent radio stop working');\n            initialVolume = 50;\n        }\n        return initialVolume;\n    }\n    function handleMusicDirChanged() {\n        // By Default the value is set to ~/Music/Radio but when changing to another location and back again to the default value in the settings dialog, the music dir is set to null instead of the default value again. As workaround the music dir is set programmatically to default value again if value is set to null (and the settings dialog can't be opened anymore). \n        if (settingsObject.musicDownloadDir === null) {\n            settingsObject.musicDownloadDir = \"~/Music/Radio\";\n        }\n    }\n    onIconChanged(settingsObject.iconType);\n    onIconColorPlayingChanged(settingsObject.symbolicIconColorWhenPlaying);\n    onIconColorPausedChanged(settingsObject.symbolicIconColorWhenPaused);\n    onChannelOnPanelChanged(settingsObject.channelNameOnPanel);\n    // TODO also onMyStationChanged should be called (and removed as arg from  ChannelStore)\n    return settingsObject;\n};\n\n;// CONCATENATED MODULE: ./src/ui/Applet/AppletLabel.ts\nconst { Label } = imports.gi.St;\nconst { EllipsizeMode } = imports.gi.Pango;\nconst { ActorAlign } = imports.gi.Clutter;\nfunction createAppletLabel() {\n    const label = new Label({\n        reactive: true,\n        track_hover: true,\n        style_class: 'applet-label',\n        y_align: ActorAlign.CENTER,\n        y_expand: false,\n        visible: false\n    });\n    // No idea why needed but without the label is not shown \n    label.clutter_text.ellipsize = EllipsizeMode.NONE;\n    let visible;\n    let text;\n    /**\n     *\n     * @param newValue text to show on the label. The text however is only visible in the GUI when visible is true. It is also shown no text when passing null for text but in that case the text is shown again when calling this function again with a string (i.e this function is intended to be used with null when the text shall only temporarily be hidden)\n     *\n     */\n    function setText(newValue) {\n        text = newValue;\n        if (!visible)\n            return;\n        label.show();\n        newValue ? label.text = ` ${newValue}` : label.hide();\n    }\n    function setVisibility(newValue) {\n        visible = newValue;\n        if (text)\n            label.visible = newValue;\n        if (visible && text)\n            setText(text);\n    }\n    return {\n        actor: label,\n        setVisibility,\n        setText,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Applet/AppletTooltip.ts\n\nconst { PanelItemTooltip } = imports.ui.tooltips;\nfunction createAppletTooltip(args) {\n    const { orientation, applet } = args;\n    const tooltip = new PanelItemTooltip(applet, null, orientation);\n    function setVolume(volume) {\n        if (volume == null) {\n            tooltip.set_text(DEFAULT_TOOLTIP_TXT);\n            return;\n        }\n        tooltip.set_text(`Volume: ${volume.toString()} %`);\n    }\n    return {\n        setVolume\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ChannelStore.ts\nclass ChannelStore {\n    constructor(channelList) {\n        this.channelList = channelList;\n    }\n    set channelList(channelList) {\n        const filteredChannelList = channelList.filter(channel => channel.inc);\n        this._channelList = filteredChannelList.map(channel => {\n            return Object.assign(Object.assign({}, channel), { url: channel.url.trim() });\n        });\n        // TODO: add babel to allow the usage of flatMap!\n        // return this.channelList.flatMap(channel =>\n        //     channel.inc ? channel.url : []\n        // )\n    }\n    get activatedChannelUrls() {\n        return this._channelList.map(channel => channel.url);\n    }\n    get activatedChannelNames() {\n        return this._channelList.map(channel => channel.name);\n    }\n    // TODO: what is when two Channels have the same Name or Url? :O\n    getChannelName(channelUrl) {\n        const channel = this._channelList.find(cnl => cnl.url === channelUrl);\n        return channel ? channel.name : null;\n    }\n    getChannelUrl(channelName) {\n        const channel = this._channelList.find(cnl => cnl.name === channelName);\n        return channel ? channel.url : null;\n    }\n    checkListChanged(channelList) {\n        return JSON.stringify(channelList) === JSON.stringify(this._channelList) ?\n            false : true;\n    }\n    checkUrlValid(channelUrl) {\n        return this._channelList.some(cnl => cnl.url === channelUrl);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/lib/ActivWidget.ts\nconst { KEY_space, KEY_KP_Enter, KEY_Return } = imports.gi.Clutter;\nfunction createActivWidget(args) {\n    const { widget, onActivated } = args;\n    // TODO: understand can_focus\n    widget.can_focus = true;\n    widget.reactive = true;\n    widget.track_hover = true;\n    widget.connect('button-release-event', () => onActivated === null || onActivated === void 0 ? void 0 : onActivated());\n    // TODO: This is needed because some themes (at least Adapta-Nokto but maybe also others) don't provide style for the hover pseudo class. But it would be much easier to once (and on theme changes) programmatically set the hover pseudo class equal to the active pseudo class when the hover class isn't provided by the theme. \n    widget.connect('notify::hover', () => {\n        widget.change_style_pseudo_class('active', widget.hover);\n        if (widget.hover)\n            widget.grab_key_focus();\n    });\n    widget.connect('key-press-event', (actor, event) => {\n        const symbol = event.get_key_symbol();\n        const relevantKeys = [KEY_space, KEY_KP_Enter, KEY_Return];\n        if (relevantKeys.includes(symbol) && widget.hover)\n            onActivated === null || onActivated === void 0 ? void 0 : onActivated();\n    });\n}\n\n;// CONCATENATED MODULE: ./src/lib/PopupSubMenu.ts\n\nconst { BoxLayout, Label: PopupSubMenu_Label, Icon: PopupSubMenu_Icon, ScrollView } = imports.gi.St;\nconst { ActorAlign: PopupSubMenu_ActorAlign, Point } = imports.gi.Clutter;\nconst { PolicyType } = imports.gi.Gtk;\nfunction createSubMenu(args) {\n    const { text } = args;\n    const container = new BoxLayout({\n        vertical: true\n    });\n    const label = new PopupSubMenu_Label({\n        text\n    });\n    const triangle = new PopupSubMenu_Icon({\n        style_class: 'popup-menu-arrow',\n        icon_name: 'pan-end',\n        rotation_angle_z: 90,\n        x_expand: true,\n        x_align: PopupSubMenu_ActorAlign.END,\n        pivot_point: new Point({ x: 0.5, y: 0.5 }),\n        important: true // without this, it looks ugly on Mint-X Themes\n    });\n    const toggle = new BoxLayout({\n        style_class: 'popup-menu-item popup-submenu-menu-item'\n    });\n    createActivWidget({\n        widget: toggle,\n        onActivated: toggleScrollbox\n    });\n    [label, triangle].forEach(widget => toggle.add_child(widget));\n    container.add_child(toggle);\n    const scrollbox = new ScrollView({\n        style_class: 'popup-sub-menu',\n        vscrollbar_policy: PolicyType.AUTOMATIC,\n        hscrollbar_policy: PolicyType.NEVER\n    });\n    const box = new BoxLayout({\n        vertical: true\n    });\n    function toggleScrollbox() {\n        scrollbox.visible ? closeMenu() : openMenu();\n    }\n    function openMenu() {\n        scrollbox.show();\n        triangle.rotation_angle_z = 90;\n    }\n    function closeMenu() {\n        scrollbox.hide();\n        triangle.rotation_angle_z = 0;\n    }\n    // add_child is recommended but doesn't work: https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/3172\n    scrollbox.add_actor(box);\n    [toggle, scrollbox].forEach(widget => container.add_child(widget));\n    return {\n        /** the container which should be used to add it as child to a parent Actor */\n        actor: container,\n        /** the container which should be used to add children  */\n        box,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/functions/limitString.ts\nfunction limitString(text, maxCharNumber) {\n    if (!text)\n        return;\n    if (text.length <= maxCharNumber)\n        return text;\n    return [...text].slice(0, maxCharNumber - 3).join('') + '...';\n}\n\n;// CONCATENATED MODULE: ./src/lib/IconMenuItem.ts\n\n\nconst { Icon: IconMenuItem_Icon, IconType: IconMenuItem_IconType, Label: IconMenuItem_Label, BoxLayout: IconMenuItem_BoxLayout } = imports.gi.St;\nfunction createIconMenuItem(args) {\n    const { text, maxCharNumber, iconName, onActivated } = args;\n    let icon;\n    let label;\n    const container = new IconMenuItem_BoxLayout({\n        style_class: 'popup-menu-item'\n    });\n    setIconName(iconName);\n    setText(text);\n    function setIconName(name) {\n        if (icon && !name) {\n            container.remove_child(icon);\n            icon = null;\n            return;\n        }\n        if (!name)\n            return;\n        initIcon();\n        icon.icon_name = name;\n        if (container.get_child_at_index(0) !== icon)\n            container.insert_child_at_index(icon, 0);\n    }\n    function initIcon() {\n        if (!icon) {\n            icon = new IconMenuItem_Icon({\n                icon_type: IconMenuItem_IconType.SYMBOLIC,\n                style_class: 'popup-menu-icon'\n            });\n        }\n    }\n    function setText(text) {\n        const labelText = text || ' ';\n        if (!label) {\n            label = new IconMenuItem_Label();\n            container.add_child(label);\n        }\n        label.set_text(limitString(labelText, maxCharNumber));\n    }\n    onActivated && createActivWidget({ widget: container, onActivated });\n    return {\n        actor: container,\n        setIconName,\n        setText\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/ChannelList/ChannelMenuItem.ts\n\n\nfunction createChannelMenuItem(args) {\n    const { channelName, onActivated, playbackStatus } = args;\n    const playbackIconMap = new Map([\n        [\"Playing\", PLAY_ICON_NAME],\n        [\"Paused\", PAUSE_ICON_NAME],\n        [\"Loading\", LOADING_ICON_NAME],\n        [\"Stopped\", null]\n    ]);\n    const iconMenuItem = createIconMenuItem({\n        maxCharNumber: MAX_STRING_LENGTH,\n        text: channelName,\n        onActivated: () => onActivated(channelName)\n    });\n    function setPlaybackStatus(playbackStatus) {\n        const iconName = playbackIconMap.get(playbackStatus);\n        iconMenuItem.setIconName(iconName);\n    }\n    playbackStatus && setPlaybackStatus(playbackStatus);\n    return {\n        setPlaybackStatus,\n        actor: iconMenuItem.actor\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/ChannelList/ChannelList.ts\n\n\nfunction createChannelList(args) {\n    const { stationNames, onChannelClicked } = args;\n    const subMenu = createSubMenu({ text: 'My Stations' });\n    let currentChannelName;\n    let playbackStatus = 'Stopped';\n    // the channelItems are saved here to the map and to the container as on the container only the reduced name are shown. Theoretically it therefore couldn't be differentiated between two long channel names with the same first 30 (or so) characters   \n    const channelItems = new Map();\n    function setStationNames(names) {\n        channelItems.clear();\n        subMenu.box.remove_all_children();\n        names.forEach(name => {\n            const channelPlaybackstatus = (name === currentChannelName) ? playbackStatus : 'Stopped';\n            const channelItem = createChannelMenuItem({\n                channelName: name,\n                onActivated: onChannelClicked,\n                playbackStatus: channelPlaybackstatus\n            });\n            channelItems.set(name, channelItem);\n            subMenu.box.add_child(channelItem.actor);\n        });\n    }\n    function setPlaybackStatus(newStatus) {\n        playbackStatus = newStatus;\n        if (!currentChannelName)\n            return;\n        const channelMenuItem = channelItems.get(currentChannelName);\n        channelMenuItem === null || channelMenuItem === void 0 ? void 0 : channelMenuItem.setPlaybackStatus(playbackStatus);\n        if (playbackStatus === 'Stopped')\n            currentChannelName = null;\n    }\n    function setCurrentChannel(name) {\n        const currentChannelItem = channelItems.get(currentChannelName);\n        currentChannelItem === null || currentChannelItem === void 0 ? void 0 : currentChannelItem.setPlaybackStatus('Stopped');\n        if (name) {\n            const newChannelItem = channelItems.get(name);\n            if (!newChannelItem)\n                throw new Error(`No channelItem exist for ${name}`);\n            newChannelItem.setPlaybackStatus(playbackStatus);\n        }\n        currentChannelName = name;\n    }\n    setStationNames(stationNames);\n    return {\n        actor: subMenu.actor,\n        setPlaybackStatus,\n        setStationNames,\n        setCurrentChannel\n    };\n}\n\n;// CONCATENATED MODULE: ./src/lib/Slider.ts\nconst { DrawingArea } = imports.gi.St;\nconst { cairo_set_source_color, grab_pointer, ungrab_pointer } = imports.gi.Clutter;\nfunction createSlider(args) {\n    const style_class = 'popup-slider-menu-item';\n    const { initialValue, onValueChanged } = args;\n    let value;\n    if (initialValue)\n        value = limitToMinMax(initialValue);\n    const drawing = new DrawingArea({\n        style_class,\n        reactive: true,\n        x_expand: true\n    });\n    drawing.connect('repaint', () => {\n        const cr = drawing.get_context();\n        const themeNode = drawing.get_theme_node();\n        const [width, height] = drawing.get_surface_size();\n        const handleRadius = themeNode.get_length('-slider-handle-radius');\n        const sliderHeight = themeNode.get_length('-slider-height');\n        const sliderBorderWidth = themeNode.get_length('-slider-border-width');\n        const sliderBorderRadius = Math.min(width, sliderHeight) / 2;\n        const sliderBorderColor = themeNode.get_color('-slider-border-color');\n        const sliderColor = themeNode.get_color('-slider-background-color');\n        const sliderActiveBorderColor = themeNode.get_color('-slider-active-border-color');\n        const sliderActiveColor = themeNode.get_color('-slider-active-background-color');\n        const TAU = Math.PI * 2;\n        const handleX = handleRadius + (width - 2 * handleRadius) * value;\n        cr.arc(sliderBorderRadius + sliderBorderWidth, height / 2, sliderBorderRadius, TAU * 1 / 4, TAU * 3 / 4);\n        cr.lineTo(handleX, (height - sliderHeight) / 2);\n        cr.lineTo(handleX, (height + sliderHeight) / 2);\n        cr.lineTo(sliderBorderRadius + sliderBorderWidth, (height + sliderHeight) / 2);\n        cairo_set_source_color(cr, sliderActiveColor);\n        cr.fillPreserve();\n        cairo_set_source_color(cr, sliderActiveBorderColor);\n        cr.setLineWidth(sliderBorderWidth);\n        cr.stroke();\n        cr.arc(width - sliderBorderRadius - sliderBorderWidth, height / 2, sliderBorderRadius, TAU * 3 / 4, TAU * 1 / 4);\n        cr.lineTo(handleX, (height + sliderHeight) / 2);\n        cr.lineTo(handleX, (height - sliderHeight) / 2);\n        cr.lineTo(width - sliderBorderRadius - sliderBorderWidth, (height - sliderHeight) / 2);\n        cairo_set_source_color(cr, sliderColor);\n        cr.fillPreserve();\n        cairo_set_source_color(cr, sliderBorderColor);\n        cr.setLineWidth(sliderBorderWidth);\n        cr.stroke();\n        const handleY = height / 2;\n        const color = themeNode.get_foreground_color();\n        cairo_set_source_color(cr, color);\n        cr.arc(handleX, handleY, handleRadius, 0, 2 * Math.PI);\n        cr.fill();\n        cr.$dispose();\n    });\n    drawing.connect('button-press-event', (actor, event) => {\n        grab_pointer(drawing);\n        const motionId = drawing.connect('motion-event', (actor, event) => {\n            moveHandle(event);\n        });\n        const buttonReleaseId = drawing.connect('button-release-event', () => {\n            drawing.disconnect(buttonReleaseId);\n            drawing.disconnect(motionId);\n            ungrab_pointer();\n        });\n        moveHandle(event);\n    });\n    function moveHandle(event) {\n        const [absX, absY] = event.get_coords();\n        const [sliderX, sliderY] = drawing.get_transformed_position();\n        const relX = absX - sliderX;\n        const width = drawing.width;\n        const handleRadius = drawing.get_theme_node().get_length('-slider-handle-radius');\n        const newValue = (relX - handleRadius) / (width - 2 * handleRadius);\n        const newValueLimitToMinMax = limitToMinMax(newValue);\n        setValue(newValueLimitToMinMax);\n    }\n    function limitToMinMax(value) {\n        return Math.max(Math.min(value, 1), 0);\n    }\n    function setValue(newValue, silent = false) {\n        const correctedValue = limitToMinMax(newValue);\n        if (correctedValue === value)\n            return;\n        value = correctedValue;\n        if (!silent)\n            onValueChanged === null || onValueChanged === void 0 ? void 0 : onValueChanged(value);\n        drawing.queue_repaint();\n    }\n    function getValue() {\n        return value;\n    }\n    return {\n        actor: drawing,\n        setValue,\n        getValue\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/VolumeSlider.ts\n\n\n\nconst { BoxLayout: VolumeSlider_BoxLayout, Icon: VolumeSlider_Icon, IconType: VolumeSlider_IconType } = imports.gi.St;\nconst { Tooltip } = imports.ui.tooltips;\nconst { KEY_Right, KEY_Left, ScrollDirection } = imports.gi.Clutter;\nfunction createVolumeSlider(args) {\n    const { onVolumeChanged } = args;\n    let tooltip;\n    const container = new VolumeSlider_BoxLayout({\n        style_class: POPUP_MENU_ITEM_CLASS,\n    });\n    createActivWidget({\n        widget: container\n    });\n    /** in Percent and rounded! */\n    let volume;\n    const slider = createSlider({\n        onValueChanged: handleSliderValueChanged\n    });\n    const icon = new VolumeSlider_Icon({\n        icon_type: VolumeSlider_IconType.SYMBOLIC,\n        style_class: POPUP_ICON_CLASS,\n        reactive: true\n    });\n    [icon, slider.actor].forEach(widget => {\n        container.add_child(widget);\n    });\n    container.connect('key-press-event', (actor, event) => {\n        const key = event.get_key_symbol();\n        if (key === KEY_Right || key === KEY_Left) {\n            const direction = (key === KEY_Right) ? 'increase' : 'decrease';\n            deltaChange(direction);\n        }\n    });\n    container.connect('scroll-event', (actor, event) => {\n        const scrollDirection = event.get_scroll_direction();\n        const direction = (scrollDirection === ScrollDirection.UP) ? 'increase' : 'decrease';\n        deltaChange(direction);\n    });\n    icon.connect('button-press-event', () => {\n        slider.setValue(0);\n    });\n    /**\n     *\n     * @param newValue between 0 and 1\n     */\n    function handleSliderValueChanged(newValue) {\n        updateVolume(newValue * 100, true);\n    }\n    function deltaChange(direction) {\n        const delta = (direction === 'increase') ? VOLUME_DELTA : -VOLUME_DELTA;\n        const newValue = slider.getValue() + delta / 100;\n        slider.setValue(newValue);\n    }\n    /**\n     *\n     * @param newVolume in percent but doesn't need to be rounded\n     * @param showTooltip\n     */\n    function updateVolume(newVolume, showTooltip) {\n        const newVolumeRounded = Math.round(newVolume);\n        if (newVolumeRounded === volume)\n            return;\n        volume = newVolumeRounded;\n        slider.setValue(volume / 100);\n        icon.set_icon_name(getVolumeIcon({ volume }));\n        setTooltip(volume);\n        showTooltip && tooltip.show();\n        onVolumeChanged === null || onVolumeChanged === void 0 ? void 0 : onVolumeChanged(volume);\n    }\n    /**\n     *\n     * @param volume in Percent and rounded!\n     */\n    function setTooltip(volume) {\n        if (!tooltip)\n            tooltip = new Tooltip(slider.actor, ' ');\n        tooltip.set_text(`Volume: ${volume.toString()} %`);\n    }\n    /**\n     *\n     * @param newVolume in percent (0-100)\n     */\n    function setVolume(newVolume) {\n        updateVolume(newVolume, false);\n    }\n    return {\n        actor: container,\n        setVolume\n    };\n}\n\n;// CONCATENATED MODULE: ./src/lib/PopupMenu.ts\nconst { BoxLayout: PopupMenu_BoxLayout, Bin: PopupMenu_Bin, Side } = imports.gi.St;\nconst { uiGroup, layoutManager, panelManager, pushModal, popModal } = imports.ui.main;\nconst { KEY_Escape } = imports.gi.Clutter;\nconst { util_get_transformed_allocation } = imports.gi.Cinnamon;\nconst { PanelLoc } = imports.ui.popupMenu;\nfunction createPopupMenu(args) {\n    const { launcher } = args;\n    const box = new PopupMenu_BoxLayout({\n        style_class: 'popup-menu-content',\n        vertical: true,\n        visible: false,\n    });\n    // only for styling purposes\n    const bin = new PopupMenu_Bin({\n        style_class: 'menu',\n        child: box,\n        visible: false\n    });\n    uiGroup.add_child(bin);\n    box.connect('key-press-event', (actor, event) => {\n        event.get_key_symbol() === KEY_Escape && close();\n    });\n    launcher.connect('queue-relayout', () => {\n        if (!box.visible)\n            return;\n        setTimeout(() => {\n            setLayout();\n        }, 0);\n    });\n    function setLayout() {\n        const freeSpace = calculateFreeSpace();\n        const maxHeight = calculateMaxHeight(freeSpace);\n        box.style = `max-height: ${maxHeight}px;`;\n        const [xPos, yPos] = calculatePosition(maxHeight, freeSpace);\n        // Without Math.floor, the popup menu gets for some reason blurred on some themes (e.g. Adapta Nokto)!\n        bin.set_position(Math.floor(xPos), Math.floor(yPos));\n    }\n    function calculateFreeSpace() {\n        var _a, _b, _c, _d;\n        const monitor = layoutManager.findMonitorForActor(launcher);\n        const visiblePanels = panelManager.getPanelsInMonitor(monitor.index);\n        const panelSizes = new Map(visiblePanels.map(panel => {\n            let width = 0, height = 0;\n            if (panel.getIsVisible()) {\n                width = panel.actor.width;\n                height = panel.actor.height;\n            }\n            return [panel.panelPosition, { width, height }];\n        }));\n        return {\n            left: monitor.x + (((_a = panelSizes.get(PanelLoc.left)) === null || _a === void 0 ? void 0 : _a.width) || 0),\n            bottom: monitor.y + monitor.height - (((_b = panelSizes.get(PanelLoc.bottom)) === null || _b === void 0 ? void 0 : _b.height) || 0),\n            top: monitor.y + (((_c = panelSizes.get(PanelLoc.top)) === null || _c === void 0 ? void 0 : _c.height) || 0),\n            right: monitor.x + monitor.width - (((_d = panelSizes.get(PanelLoc.right)) === null || _d === void 0 ? void 0 : _d.width) || 0)\n        };\n    }\n    function calculateMaxHeight(freeSpace) {\n        const freeSpaceHeight = (freeSpace.bottom - freeSpace.top) / global.ui_scale;\n        const boxThemeNode = box.get_theme_node();\n        const binThemeNode = bin.get_theme_node();\n        const paddingTop = boxThemeNode.get_padding(Side.TOP);\n        const paddingBottom = boxThemeNode.get_padding(Side.BOTTOM);\n        const borderWidthTop = binThemeNode.get_border_width(Side.TOP);\n        const borderWidthBottom = binThemeNode.get_border_width(Side.BOTTOM);\n        const maxHeight = freeSpaceHeight - paddingBottom - paddingTop - borderWidthTop - borderWidthBottom;\n        return maxHeight;\n    }\n    function calculatePosition(maxHeight, freeSpace) {\n        const appletBox = util_get_transformed_allocation(launcher);\n        const [minWidth, minHeight, natWidth, natHeight] = box.get_preferred_size();\n        const margin = (natWidth - appletBox.get_width()) / 2;\n        const xLeftNormal = Math.max(freeSpace.left, appletBox.x1 - margin);\n        const xRightNormal = appletBox.x2 + margin;\n        const xLeftMax = freeSpace.right - appletBox.get_width() - margin * 2;\n        const xLeft = (xRightNormal < freeSpace.right) ? xLeftNormal : xLeftMax;\n        const yTopNormal = Math.max(appletBox.y1, freeSpace.top);\n        const yBottomNormal = yTopNormal + natHeight;\n        const yTopMax = freeSpace.bottom - box.height;\n        const yTop = (yBottomNormal < freeSpace.bottom) ? yTopNormal : yTopMax;\n        return [xLeft, yTop];\n    }\n    function toggle() {\n        box.visible ? close() : open();\n    }\n    // no idea why it sometimes needs to be bin and sometimes box ...\n    function open() {\n        setLayout();\n        bin.show();\n        box.show();\n        launcher.add_style_pseudo_class('checked');\n        pushModal(box);\n        // For some reason, it is emmited the button-press event when clicking e.g on the desktop but the button-release-event when clicking on another applet\n        global.stage.connect('button-press-event', handleClick);\n        global.stage.connect('button-release-event', handleClick);\n    }\n    function close() {\n        if (!box.visible)\n            return;\n        bin.hide();\n        box.hide();\n        launcher.remove_style_pseudo_class('checked');\n        popModal(box);\n    }\n    function handleClick(actor, event) {\n        if (!box.visible) {\n            return;\n        }\n        const clickedActor = event.get_source();\n        const binClicked = box.contains(clickedActor);\n        const appletClicked = launcher.contains(clickedActor);\n        (!binClicked && !appletClicked) && close();\n    }\n    box.toggle = toggle;\n    box.close = close;\n    return box;\n}\n\n;// CONCATENATED MODULE: ./src/ui/InfoSection.ts\n\n\nconst { BoxLayout: InfoSection_BoxLayout } = imports.gi.St;\nfunction createInfoSection() {\n    const channelInfoItem = createInfoItem(RADIO_SYMBOLIC_ICON_NAME);\n    const songInfoItem = createInfoItem(SONG_INFO_ICON_NAME);\n    const infoSection = new InfoSection_BoxLayout({\n        vertical: true\n    });\n    [channelInfoItem, songInfoItem].forEach(infoItem => {\n        infoSection.add_child(infoItem.actor);\n    });\n    function createInfoItem(iconName) {\n        const iconMenuItem = createIconMenuItem({\n            iconName,\n            maxCharNumber: MAX_STRING_LENGTH,\n        });\n        return iconMenuItem;\n    }\n    function setChannel(channeName) {\n        channelInfoItem.setText(channeName);\n    }\n    function setSongTitle(songTitle) {\n        songInfoItem.setText(songTitle);\n    }\n    return {\n        actor: infoSection,\n        setSongTitle,\n        setChannel\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/ControlBtn.ts\n\nconst { Button, Icon: ControlBtn_Icon, IconType: ControlBtn_IconType } = imports.gi.St;\nconst { Tooltip: ControlBtn_Tooltip } = imports.ui.tooltips;\nfunction createControlBtn(args) {\n    const { iconName, tooltipTxt, onClick } = args;\n    const icon = new ControlBtn_Icon({\n        icon_type: ControlBtn_IconType.SYMBOLIC,\n        icon_name: iconName,\n        style_class: 'popup-menu-icon' // this specifies the icon-size\n    });\n    const btn = new Button({\n        reactive: true,\n        can_focus: true,\n        // It is challenging to get a reasonable style on all themes. I have tried using the 'sound-player-overlay' class but didn't get it working. However might be possible anyway.  \n        style_class: \"popup-menu-item\",\n        style: \"width:20px; padding:10px!important\",\n        child: icon\n    });\n    createActivWidget({\n        widget: btn,\n        onActivated: onClick\n    });\n    const tooltip = new ControlBtn_Tooltip(btn, tooltipTxt);\n    return {\n        actor: btn,\n        icon,\n        tooltip\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/PlayPauseButton.ts\n\n\nfunction createPlayPauseButton(args) {\n    const { onClick } = args;\n    const controlBtn = createControlBtn({\n        iconName: PLAY_ICON_NAME,\n        tooltipTxt: 'Play',\n        onClick\n    });\n    /**\n     *\n     * @param playPause he current state of the radio, which means that the opposite is shown (e.g. when the radio is playing, it is shown a pause item)\n     *\n     */\n    function setPlaybackStatus(playPause) {\n        let tooltipTxt;\n        let iconName;\n        if (playPause === 'Playing') {\n            tooltipTxt = 'Pause';\n            iconName = PAUSE_ICON_NAME;\n        }\n        if (playPause === 'Paused') {\n            tooltipTxt = 'Play';\n            iconName = PLAY_ICON_NAME;\n        }\n        controlBtn.tooltip.set_text(tooltipTxt);\n        controlBtn.icon.icon_name = iconName;\n    }\n    return {\n        actor: controlBtn.actor,\n        setPlaybackStatus\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/CopyButton.ts\n\n\nfunction createCopyButton(args) {\n    const { onClick } = args;\n    const defaultTooltipTxt = \"Copy current song title to Clipboard\";\n    const controlBtn = createControlBtn({\n        iconName: COPY_ICON_NAME,\n        tooltipTxt: defaultTooltipTxt,\n        onClick: handleClick\n    });\n    function handleClick() {\n        controlBtn.tooltip.show();\n        onClick();\n        // showCopyInTooltip()\n    }\n    // For some reasons I don't understand, this function has stopped working after refactoring the popup Menu. No idea how to debug this. Therefore deactivating this for now :-(. It is thrown an  warning when clicking on the button but this has nothing to do with the tooltip\n    function showCopyInTooltip() {\n        const tooltip = controlBtn.tooltip;\n        tooltip.set_text(\"Copied\");\n        tooltip.show();\n        setTimeout(() => {\n            tooltip.hide();\n            tooltip.set_text(defaultTooltipTxt);\n        }, 500);\n    }\n    return {\n        actor: controlBtn.actor,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/DonwloadButton.ts\n\n\nfunction createDownloadButton(args) {\n    const { onClick } = args;\n    const downloadButton = createControlBtn({\n        iconName: DOWNLOAD_ICON_NAME,\n        tooltipTxt: \"Download current song from Youtube\",\n        onClick\n    });\n    return {\n        actor: downloadButton.actor\n    };\n}\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/MediaControlToolbar.ts\nconst { BoxLayout: MediaControlToolbar_BoxLayout } = imports.gi.St;\nconst { ActorAlign: MediaControlToolbar_ActorAlign } = imports.gi.Clutter;\nconst createMediaControlToolbar = (args) => {\n    const { controlBtns } = args;\n    const toolbar = new MediaControlToolbar_BoxLayout({\n        style_class: \"radio-applet-media-control-toolbar\",\n        x_align: MediaControlToolbar_ActorAlign.CENTER\n    });\n    controlBtns.forEach(btn => toolbar.add_child(btn));\n    return toolbar;\n};\n\n;// CONCATENATED MODULE: ./src/ui/Toolbar/StopButton.ts\n\n\nfunction createStopBtn(args) {\n    const { onClick } = args;\n    const stopBtn = createControlBtn({\n        iconName: STOP_ICON_NAME,\n        tooltipTxt: \"Stop\",\n        onClick\n    });\n    return {\n        actor: stopBtn.actor\n    };\n}\n\n;// CONCATENATED MODULE: ./src/functions/copyText.ts\nconst { Clipboard, ClipboardType } = imports.gi.St;\nfunction copyText(text) {\n    Clipboard.get_default().set_text(ClipboardType.CLIPBOARD, text);\n}\n\n;// CONCATENATED MODULE: ./src/ui/Seeker.ts\n\n\n\nconst { BoxLayout: Seeker_BoxLayout, Label: Seeker_Label } = imports.gi.St;\nfunction createSeeker(args) {\n    const { onPositionChanged } = args;\n    const container = new Seeker_BoxLayout({\n        style_class: POPUP_MENU_ITEM_CLASS\n    });\n    createActivWidget({\n        widget: container\n    });\n    // length in seconds\n    let length = 100;\n    // position in seconds\n    let position;\n    const positionLabel = new Seeker_Label();\n    const lengthLabel = new Seeker_Label();\n    const slider = createSlider({\n        initialValue: 0.5,\n        onValueChanged: handleValueChanged\n    });\n    [positionLabel, slider.actor, lengthLabel].forEach(widget => {\n        container.add_child(widget);\n    });\n    /** @param value in seconds */\n    function setLength(value) {\n        length = value;\n        lengthLabel.set_text(secondsToFormatedMin(value));\n        refreshSliderValue();\n    }\n    /** @param value in seconds */\n    function setPosition(value) {\n        position = value;\n        positionLabel.set_text(secondsToFormatedMin(position));\n        refreshSliderValue();\n    }\n    function refreshSliderValue() {\n        const sliderValue = length === 0 ? 0 : Math.min(position / length, 1);\n        slider.setValue(sliderValue, true);\n    }\n    function handleValueChanged(value) {\n        const newPosition = value * length;\n        onPositionChanged(newPosition);\n    }\n    /**\n     * converts seconds to a string in the form of: mm:ss\n     *\n     * e.g. 10 seconds = 00:10, 100 seconds = 01:40,  6000 seconds = 100:00\n     *      *\n     * @param seconds\n     * @returns\n     */\n    function secondsToFormatedMin(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds - minutes * 60;\n        // ensures minutes and seconds are shown with at least two digits\n        return [minutes, remainingSeconds].map(value => {\n            const valueString = value.toString().padStart(2, '0');\n            return valueString;\n        }).join(\":\");\n    }\n    return {\n        actor: container,\n        setLength,\n        setPosition\n    };\n}\n\n;// CONCATENATED MODULE: ./src/lib/PopupSeperator.ts\nconst { BoxLayout: PopupSeperator_BoxLayout, DrawingArea: PopupSeperator_DrawingArea } = imports.gi.St;\nconst { LinearGradient } = imports.gi.cairo;\nfunction createSeparatorMenuItem() {\n    const container = new PopupSeperator_BoxLayout({\n        style_class: 'popup-menu-item'\n    });\n    const drawingArea = new PopupSeperator_DrawingArea({\n        style_class: 'popup-separator-menu-item',\n        x_expand: true\n    });\n    container.add_child(drawingArea);\n    drawingArea.connect('repaint', () => {\n        const cr = drawingArea.get_context();\n        const themeNode = drawingArea.get_theme_node();\n        const [width, height] = drawingArea.get_surface_size();\n        const margin = themeNode.get_length('-margin-horizontal');\n        const gradientHeight = themeNode.get_length('-gradient-height');\n        const startColor = themeNode.get_color('-gradient-start');\n        const endColor = themeNode.get_color('-gradient-end');\n        const gradientWidth = (width - margin * 2);\n        const gradientOffset = (height - gradientHeight) / 2;\n        const pattern = new LinearGradient(margin, gradientOffset, width - margin, gradientOffset + gradientHeight);\n        // TODO\n        // const colors = ['red', 'green', 'blue', 'alpha'].map(color => startColor[color] / 255)\n        // https://github.com/microsoft/TypeScript/issues/4130#issuecomment-499525897\n        pattern.addColorStopRGBA(0, startColor.red / 255, startColor.green / 255, startColor.blue / 255, startColor.alpha / 255);\n        pattern.addColorStopRGBA(0.5, endColor.red / 255, endColor.green / 255, endColor.blue / 255, endColor.alpha / 255);\n        pattern.addColorStopRGBA(1, startColor.red / 255, startColor.green / 255, startColor.blue / 255, startColor.alpha / 255);\n        cr.setSource(pattern);\n        cr.rectangle(margin, gradientOffset, gradientWidth, gradientHeight);\n        cr.fill();\n        cr.$dispose;\n    });\n    return container;\n}\n\n;// CONCATENATED MODULE: ./src/functions/promiseHelpers.ts\nconst { spawnCommandLineAsyncIO } = imports.misc.util;\nconst spawnCommandLinePromise = function (command) {\n    return new Promise((resolve, reject) => {\n        spawnCommandLineAsyncIO(command, (stdout, stderr, exitCode) => {\n            (stdout) ? resolve([null, stdout, 0]) : resolve([stderr, null, exitCode]);\n        });\n    });\n};\n\n;// CONCATENATED MODULE: ./src/ui/Notifications/NotificationBase.ts\nconst { SystemNotificationSource, Notification } = imports.ui.messageTray;\nconst { messageTray } = imports.ui.main;\nconst { Icon: NotificationBase_Icon, IconType: NotificationBase_IconType } = imports.gi.St;\n\nconst messageSource = new SystemNotificationSource('Radio Applet');\nmessageTray.add(messageSource);\nfunction createBasicNotification(args) {\n    const { notificationText, isMarkup = false, transient = true } = args;\n    const icon = new NotificationBase_Icon({\n        icon_type: NotificationBase_IconType.SYMBOLIC,\n        icon_name: RADIO_SYMBOLIC_ICON_NAME,\n        icon_size: 25\n    });\n    const notification = new Notification(messageSource, __meta.name, notificationText, { icon, bodyMarkup: isMarkup });\n    notification.setTransient(transient);\n    notification.notify = () => {\n        messageSource.notify(notification);\n    };\n    return notification;\n}\n\n;// CONCATENATED MODULE: ./src/ui/Notifications/GenericNotification.ts\n\nfunction notify(args) {\n    const { text } = args;\n    const notification = createBasicNotification({\n        notificationText: text\n    });\n    notification.notify();\n}\n\n;// CONCATENATED MODULE: ./src/mpv/CheckInstallation.ts\n\n\n\nconst { find_program_in_path, file_test, FileTest } = imports.gi.GLib;\nasync function installMpvWithMpris() {\n    const mprisPluginDownloaded = checkMprisPluginDownloaded();\n    const mpvInstalled = checkMpvInstalled();\n    !mprisPluginDownloaded && await downloadMrisPluginInteractive();\n    if (!mpvInstalled) {\n        const notificationText = `Please ${mprisPluginDownloaded ? '' : 'also'} install the mpv package.`;\n        notify({ text: notificationText });\n        await installMpvInteractive();\n    }\n}\nfunction checkMpvInstalled() {\n    return find_program_in_path('mpv');\n}\nfunction checkMprisPluginDownloaded() {\n    return file_test(MPRIS_PLUGIN_PATH, FileTest.IS_REGULAR);\n}\nfunction installMpvInteractive() {\n    return new Promise(async (resolve, reject) => {\n        if (checkMpvInstalled())\n            return resolve();\n        if (!find_program_in_path(\"apturl\"))\n            return reject();\n        const [stderr, stdout, exitCode] = await spawnCommandLinePromise(`\n            apturl apt://mpv`);\n        // exitCode 0 means sucessfully. See: man apturl\n        return (exitCode === 0) ? resolve() : reject(stderr);\n    });\n}\nfunction downloadMrisPluginInteractive() {\n    return new Promise(async (resolve, reject) => {\n        if (checkMprisPluginDownloaded()) {\n            return resolve();\n        }\n        let [stderr, stdout, exitCode] = await spawnCommandLinePromise(`python3  ${__meta.path}/download-dialog-mpris.py`);\n        if (stdout.trim() !== 'Continue') {\n            return reject();\n        }\n        [stderr, stdout, exitCode] = await spawnCommandLinePromise(`\n            wget ${MPRIS_PLUGIN_URL} -O ${MPRIS_PLUGIN_PATH}`);\n        // Wget always prints to stderr - exitcode 0 means it was sucessfull \n        // see:  https://stackoverflow.com/questions/13066518/why-does-wget-output-to-stderr-rather-than-stdout\n        // and https://www.gnu.org/software/wget/manual/html_node/Exit-Status.html\n        return (exitCode === 0) ? resolve() : reject(stderr);\n    });\n}\n\n;// CONCATENATED MODULE: ./src/functions/downloadFromYoutube.ts\nconst { spawnCommandLineAsyncIO: downloadFromYoutube_spawnCommandLineAsyncIO } = imports.misc.util;\nconst { get_home_dir: downloadFromYoutube_get_home_dir } = imports.gi.GLib;\nfunction downloadSongFromYoutube(args) {\n    const { title, downloadDir, onDownloadFinished, onDownloadFailed } = args;\n    let hasBeenCancelled = false;\n    // when using the default value of the settings, the dir starts with ~ what can't be understand when executing command. Else it starts with file:// what youtube-dl can't handle. Saving to network directories (e.g. ftp) doesn't work \n    // TODO: Shouldn't this be done in configs(at least replacing ~)? \n    const music_dir_absolut = downloadDir.replace('~', downloadFromYoutube_get_home_dir()).replace('file://', '');\n    const downloadCommand = `\n        youtube-dl --output \"${music_dir_absolut}/%(title)s.%(ext)s\" --extract-audio --audio-format mp3 ytsearch1:\"${title.replace('\"', '\\\"')}\" --add-metadata --embed-thumbnail`;\n    const process = downloadFromYoutube_spawnCommandLineAsyncIO(downloadCommand, (stdout, stderr) => {\n        try {\n            if (hasBeenCancelled) {\n                hasBeenCancelled = false;\n                return;\n            }\n            if (stderr)\n                throw new Error(stderr);\n            if (stdout) {\n                const downloadPath = getDownloadPath(stdout);\n                if (!downloadPath)\n                    throw new Error('File not saved');\n                onDownloadFinished(downloadPath);\n            }\n        }\n        catch (error) {\n            global.logError(`The following error occured at youtube download attempt: ${error}. The used download Command was: ${downloadCommand}`);\n            onDownloadFailed();\n        }\n    });\n    function cancel() {\n        hasBeenCancelled = true;\n        // it seems to be no problem to call this after the process has already finished\n        process.force_exit();\n    }\n    return { cancel };\n}\nfunction getDownloadPath(stdout) {\n    const arrayOfLines = stdout.match(/[^\\r\\n]+/g);\n    // there is only one line in stdout which gives the path of the downloaded mp3. This start with [ffmpeg] Destination ...\n    const searchString = '[ffmpeg] Destination: ';\n    return arrayOfLines.find(line => line.includes(searchString))\n        .split(searchString)[1];\n}\n\n;// CONCATENATED MODULE: ./src/ui/Notifications/YoutubeDownloadFailedNotification.ts\n\n\nconst { spawnCommandLine: YoutubeDownloadFailedNotification_spawnCommandLine } = imports.misc.util;\nconst { get_home_dir: YoutubeDownloadFailedNotification_get_home_dir } = imports.gi.GLib;\nfunction notifyYoutubeDownloadFailed() {\n    const notificationText = `Couldn't download Song from Youtube due to an Error. Make Sure you have the newest version of youtube-dl installed. \n        \\n<b>Important:</b> Don't use apt for the installation but follow the installation instruction given on the Radio Applet Site in the Cinnamon Store instead\n        \\nFor more information see the logs`;\n    const notification = createBasicNotification({\n        notificationText,\n        isMarkup: true,\n        transient: false\n    });\n    const viewStoreBtnId = 'viewStoreBtn';\n    const viewLogBtnId = 'viewLogBtn';\n    notification.addButton(viewStoreBtnId, 'View Installation Instruction');\n    notification.addButton(viewLogBtnId, \"View Logs\");\n    notification.connect('action-invoked', (actor, id) => {\n        if (id === viewStoreBtnId) {\n            YoutubeDownloadFailedNotification_spawnCommandLine(`xdg-open ${APPLET_SITE} `);\n        }\n        if (id === viewLogBtnId) {\n            YoutubeDownloadFailedNotification_spawnCommandLine(`xdg-open ${YoutubeDownloadFailedNotification_get_home_dir()}/.xsession-errors`);\n        }\n    });\n    notification.notify();\n}\n\n;// CONCATENATED MODULE: ./src/ui/Notifications/YoutubeDownloadFinishedNotification.ts\n\nconst { spawnCommandLine: YoutubeDownloadFinishedNotification_spawnCommandLine } = imports.misc.util;\nfunction notifyYoutubeDownloadFinished(args) {\n    const { downloadPath } = args;\n    const notification = createBasicNotification({\n        notificationText: `Download finished. File saved to ${downloadPath}`\n    });\n    const playBtnId = 'openBtn';\n    notification.addButton(playBtnId, 'Play');\n    notification.connect('action-invoked', (actor, id) => {\n        if (id === playBtnId) {\n            YoutubeDownloadFinishedNotification_spawnCommandLine(`xdg-open '${downloadPath}'`);\n        }\n    });\n    notification.notify();\n}\n\n;// CONCATENATED MODULE: ./src/ui/Notifications/YoutubeDownloadStartedNotification.ts\n\nfunction notifyYoutubeDownloadStarted(args) {\n    const { title, onCancelClicked } = args;\n    const notification = createBasicNotification({\n        notificationText: `Downloading ${title} ...`,\n    });\n    const cancelBtnId = 'cancelBtn';\n    notification.addButton(cancelBtnId, 'Cancel');\n    notification.connect('action-invoked', (actor, id) => {\n        if (id === cancelBtnId)\n            onCancelClicked();\n    });\n    notification.notify();\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { ScrollDirection: src_ScrollDirection } = imports.gi.Clutter;\nconst { getAppletDefinition } = imports.ui.appletManager;\nconst { panelManager: src_panelManager } = imports.ui.main;\nconst { BoxLayout: src_BoxLayout } = imports.gi.St;\nfunction main(args) {\n    const { orientation, panelHeight, instanceId } = args;\n    // this is a workaround for now. Optimally the lastVolume should be saved persistently each time the volume is changed but this lead to significant performance issue on scrolling at the moment. However this shouldn't be the case as it is no problem to log the volume each time the volume changes (so it is a problem in the config implementation). As a workaround the volume is only saved persistently when the radio stops but the volume obviously can't be received anymore from dbus when the player has been already stopped ... \n    let lastVolume;\n    let mpvHandler;\n    let installationInProgress = false;\n    const appletDefinition = getAppletDefinition({\n        applet_id: instanceId,\n    });\n    const panel = src_panelManager.panels.find(panel => (panel === null || panel === void 0 ? void 0 : panel.panelId) === appletDefinition.panelId);\n    panel.connect('icon-size-changed', () => appletIcon.updateIconSize());\n    const appletIcon = createAppletIcon({\n        locationLabel: appletDefinition.location_label,\n        panel\n    });\n    const appletLabel = createAppletLabel();\n    const applet = createApplet({\n        icon: appletIcon.actor,\n        label: appletLabel.actor,\n        instanceId,\n        orientation,\n        panelHeight,\n        onClick: handleAppletClicked,\n        onScroll: handleScroll,\n        onMiddleClick: () => mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.togglePlayPause(),\n        onAppletMoved: () => mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.deactivateAllListener(),\n        onAppletRemoved: handleAppletRemoved,\n        onRightClick: () => popupMenu === null || popupMenu === void 0 ? void 0 : popupMenu.close()\n    });\n    const appletTooltip = createAppletTooltip({\n        applet,\n        orientation\n    });\n    const configs = createConfig({\n        uuid: __meta.uuid,\n        instanceId,\n        onIconChanged: handleIconTypeChanged,\n        onIconColorPlayingChanged: (color) => {\n            appletIcon.setColorWhenPlaying(color);\n        },\n        onIconColorPausedChanged: (color) => {\n            appletIcon.setColorWhenPaused(color);\n        },\n        onChannelOnPanelChanged: (channelOnPanel) => {\n            appletLabel.setVisibility(channelOnPanel);\n        },\n        onMyStationsChanged: handleStationsUpdated,\n    });\n    const channelStore = new ChannelStore(configs.userStations);\n    const channelList = createChannelList({\n        stationNames: channelStore.activatedChannelNames,\n        onChannelClicked: handleChannelClicked\n    });\n    const volumeSlider = createVolumeSlider({\n        onVolumeChanged: (volume) => mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.setVolume(volume)\n    });\n    const popupMenu = createPopupMenu({ launcher: applet.actor });\n    const infoSection = createInfoSection();\n    //toolbar\n    const playPauseBtn = createPlayPauseButton({\n        onClick: () => mpvHandler.togglePlayPause()\n    });\n    const stopBtn = createStopBtn({\n        onClick: () => mpvHandler.stop()\n    });\n    const downloadBtn = createDownloadButton({\n        onClick: handleDownloadBtnClicked\n    });\n    const copyBtn = createCopyButton({\n        onClick: () => copyText(mpvHandler.getCurrentTitle())\n    });\n    const mediaControlToolbar = createMediaControlToolbar({\n        controlBtns: [playPauseBtn.actor, downloadBtn.actor, copyBtn.actor, stopBtn.actor]\n    });\n    const seeker = createSeeker({\n        onPositionChanged: (value) => mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.setPosition(value)\n    });\n    const radioActiveSection = new src_BoxLayout({\n        vertical: true,\n        visible: false\n    });\n    [\n        infoSection.actor,\n        mediaControlToolbar,\n        volumeSlider.actor,\n        seeker.actor\n    ].forEach(widget => {\n        radioActiveSection.add_child(createSeparatorMenuItem());\n        radioActiveSection.add_child(widget);\n    });\n    popupMenu.add_child(channelList.actor);\n    popupMenu.add_child(radioActiveSection);\n    mpvHandler = createMpvHandler({\n        getInitialVolume: () => { return configs.initialVolume; },\n        onVolumeChanged: handleVolumeChanged,\n        onLengthChanged: hanldeLengthChanged,\n        onPositionChanged: handlePositionChanged,\n        checkUrlValid: (url) => channelStore.checkUrlValid(url),\n        onTitleChanged: handleTitleChanged,\n        onPlaybackstatusChanged: handlePlaybackstatusChanged,\n        lastUrl: configs.lastUrl,\n        onUrlChanged: handleUrlChanged\n    });\n    // CALLBACKS\n    async function handleAppletClicked() {\n        if (installationInProgress)\n            return;\n        try {\n            installationInProgress = true;\n            await installMpvWithMpris();\n            popupMenu.toggle();\n        }\n        catch (error) {\n            const notificationText = \"Couldn't start the applet. Make sure mpv is installed and the mpv mpris plugin saved in the configs folder.\";\n            notify({ text: notificationText });\n            global.logError(error);\n        }\n        finally {\n            installationInProgress = false;\n        }\n    }\n    function handleAppletRemoved() {\n        mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.deactivateAllListener();\n        mpvHandler === null || mpvHandler === void 0 ? void 0 : mpvHandler.stop();\n    }\n    function handleScroll(scrollDirection) {\n        const volumeChange = scrollDirection === src_ScrollDirection.UP ? VOLUME_DELTA : -VOLUME_DELTA;\n        mpvHandler.increaseDecreaseVolume(volumeChange);\n    }\n    function handleChannelClicked(name) {\n        const channelUrl = channelStore.getChannelUrl(name);\n        mpvHandler.setUrl(channelUrl);\n    }\n    function handleTitleChanged(title) {\n        infoSection.setSongTitle(title);\n    }\n    function handleVolumeChanged(volume) {\n        volumeSlider.setVolume(volume);\n        appletTooltip.setVolume(volume);\n        lastVolume = volume;\n    }\n    function handleIconTypeChanged(iconType) {\n        appletIcon.setIconType(iconType);\n    }\n    function handleStationsUpdated(stations) {\n        const stationsChanged = channelStore.checkListChanged(stations);\n        if (!stationsChanged)\n            return;\n        channelStore.channelList = stations;\n        channelList.setStationNames(channelStore.activatedChannelNames);\n        const lastUrlValid = channelStore.checkUrlValid(configs.lastUrl);\n        if (!lastUrlValid)\n            mpvHandler.stop();\n    }\n    function handlePlaybackstatusChanged(playbackstatus) {\n        if (playbackstatus === 'Stopped') {\n            radioActiveSection.hide();\n            configs.lastVolume = lastVolume;\n            configs.lastUrl = null;\n            appletLabel.setText(null);\n            handleVolumeChanged(null);\n            popupMenu.close();\n        }\n        if (playbackstatus !== 'Stopped' && !radioActiveSection.visible)\n            radioActiveSection.show();\n        channelList.setPlaybackStatus(playbackstatus);\n        appletIcon.setPlaybackStatus(playbackstatus);\n        if (playbackstatus === 'Playing' || playbackstatus === 'Paused') {\n            playPauseBtn.setPlaybackStatus(playbackstatus);\n        }\n    }\n    function handleUrlChanged(url) {\n        const channelName = url ? channelStore.getChannelName(url) : null;\n        appletLabel.setText(channelName);\n        channelList.setCurrentChannel(channelName);\n        infoSection.setChannel(channelName);\n        configs.lastUrl = url;\n    }\n    function hanldeLengthChanged(length) {\n        seeker.setLength(length);\n    }\n    function handlePositionChanged(position) {\n        seeker === null || seeker === void 0 ? void 0 : seeker.setPosition(position);\n    }\n    function handleDownloadBtnClicked() {\n        const title = mpvHandler.getCurrentTitle();\n        const downloadProcess = downloadSongFromYoutube({\n            downloadDir: configs.musicDownloadDir,\n            title,\n            onDownloadFinished: (path) => notifyYoutubeDownloadFinished({\n                downloadPath: path\n            }),\n            onDownloadFailed: notifyYoutubeDownloadFailed\n        });\n        notifyYoutubeDownloadStarted({\n            title,\n            onCancelClicked: () => downloadProcess.cancel()\n        });\n    }\n    return applet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///397\n")}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[397](0,__webpack_exports__,__webpack_require__),radioApplet=__webpack_exports__})();