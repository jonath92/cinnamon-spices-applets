var notificationApplet;(()=>{"use strict";var __webpack_modules__={852:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"main\": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/Applet.ts\nconst { TextIconApplet, AllowedLayout, AppletPopupMenu } = imports.ui.applet;\nconst { PopupMenuManager, PopupMenuItem, PopupSeparatorMenuItem } = imports.ui.popupMenu;\nconst { BoxLayout, Label, Side, ScrollView, Align, Icon, IconType } = imports.gi.St;\nconst { messageTray } = imports.ui.main;\nconst { Urgency, NotificationDestroyedReason } = imports.ui.messageTray;\nconst Mainloop = imports.mainloop;\nconst Lang = imports.lang;\nconst { spawnCommandLine } = imports.misc.util;\nconst { Settings } = imports.gi.Gio;\nconst { PolicyType } = imports.gi.Gtk;\nconst { Clone } = imports.gi.Clutter;\nconst PANEL_EDIT_MODE_KEY = \"panel-edit-mode\";\nclass NoticiationApplet extends TextIconApplet {\n    constructor(orientation, panel_height, instance_id) {\n        super(orientation, panel_height, instance_id);\n        this.setAllowedLayout(AllowedLayout.BOTH);\n        this._orientation = orientation;\n        this.menuManager = new PopupMenuManager(this);\n        this.notifications = [];\n        messageTray.connect('notify-applet-update', (actor, notification) => this._notification_added(actor, notification));\n        global.settings.connect('changed::' + PANEL_EDIT_MODE_KEY, Lang.bind(this, this._on_panel_edit_mode_changed));\n        this._blinking = false;\n        this._blink_toggle = false;\n    }\n    _openMenu() {\n        this._update_timestamp();\n        this.menu.toggle();\n    }\n    _display() {\n        this.set_applet_icon_symbolic_name('empty-notif');\n        this.set_applet_tooltip('Notifications');\n        // Setup the notification container.\n        this._maincontainer = new BoxLayout({\n            name: 'traycontainer',\n            vertical: true\n        });\n        global.log('_display called');\n        this._notificationbin = new BoxLayout({ vertical: true });\n        this.button_label_box = new BoxLayout();\n        // Setup the tray icon.\n        this.menu_label = new PopupMenuItem(stringify(this.notifications.length));\n        this.menu_label.actor.reactive = false;\n        this.menu_label.actor.can_focus = false;\n        this.menu_label.label.add_style_class_name('popup-subtitle-menu-item');\n        this.clear_separator = new PopupSeparatorMenuItem();\n        this.clear_action = new PopupMenuItem(\"Clear notifications\");\n        this.clear_action.connect('activate', Lang.bind(this, this._clear_all));\n        this.clear_action.actor.hide();\n        if (this._orientation == Side.BOTTOM) {\n            this.menu.addMenuItem(this.menu_label);\n            this.menu.addActor(this._maincontainer);\n            this.menu.addMenuItem(this.clear_separator);\n            this.menu.addMenuItem(this.clear_action);\n        }\n        else {\n            this.menu.addMenuItem(this.clear_action);\n            this.menu.addMenuItem(this.clear_separator);\n            this.menu.addMenuItem(this.menu_label);\n            this.menu.addActor(this._maincontainer);\n        }\n        this.scrollview = new ScrollView({\n            x_fill: true,\n            y_fill: true,\n            y_align: Align.START,\n            style_class: \"vfade\",\n        });\n        this._maincontainer.add(this.scrollview);\n        this.scrollview.add_actor(this._notificationbin);\n        this.scrollview.set_policy(PolicyType.NEVER, PolicyType.AUTOMATIC);\n        let vscroll = this.scrollview.get_vscroll_bar();\n        vscroll.connect('scroll-start', () => {\n            this.menu.passEvents = true;\n        });\n        vscroll.connect('scroll-stop', () => {\n            this.menu.passEvents = false;\n        });\n        this._crit_icon = new Icon({\n            icon_name: 'critical-notif',\n            icon_type: IconType.SYMBOLIC,\n            reactive: true,\n            track_hover: true,\n            style_class: 'system-status-icon'\n        });\n        this._alt_crit_icon = new Icon({\n            icon_name: 'alt-critical-notif',\n            icon_type: IconType.SYMBOLIC,\n            reactive: true,\n            track_hover: true,\n            style_class: 'system-status-icon'\n        });\n        this._on_panel_edit_mode_changed();\n        this.menu.addSettingsAction(\"Notification Settings\", 'notifications');\n    }\n    _notification_added(actor, notification) {\n        global.log('notificaton added');\n        const dummyLabel = new Label({ text: 'dummy' });\n        // @ts-ignore\n        const clone = new Clone({\n            source: notification.actor\n        });\n        notification.actor.unparent();\n        let existing_index = this.notifications.indexOf(notification);\n        if (existing_index != -1) { // This notification is already listed.\n            if (notification[\"_destroyed\"]) {\n                this.notifications.splice(existing_index, 1);\n            }\n            else {\n                notification[\"_inNotificationBin\"] = true;\n                global.reparentActor(notification.actor, this._notificationbin);\n                notification[\"_timeLabel\"].show();\n            }\n            this.update_list();\n            return;\n        }\n        else if (notification[\"_destroyed\"]) {\n            return;\n        }\n        // Add notification to list.\n        notification[\"_inNotificationBin\"] = true;\n        this.notifications.push(notification);\n        // Steal the notication panel.\n        // @ts-ignore\n        this._notificationbin.add(clone);\n        this._notificationbin.add(dummyLabel);\n        // @ts-ignore\n        notification.actor._parent_container = this._notificationbin;\n        notification.actor.add_style_class_name('notification-applet-padding');\n        // Register for destruction.\n        // @ts-ignore\n        notification.connect('scrolling-changed', (notif, scrolling) => { this.menu.passEvents = scrolling; });\n        notification.connect('destroy', () => {\n            let i = this.notifications.indexOf(notification);\n            if (i != -1)\n                this.notifications.splice(i, 1);\n            this.update_list();\n        });\n        notification[\"_timeLabel\"].show();\n        this.update_list();\n    }\n    update_list() {\n        try {\n            let count = this.notifications.length;\n            if (count > 0) { // There are notifications.\n                this.actor.show();\n                this.clear_action.actor.show();\n                this.set_applet_label(count.toString());\n                // Find max urgency and derive list icon.\n                let max_urgency = -1;\n                for (let i = 0; i < count; i++) {\n                    let cur_urgency = this.notifications[i].urgency;\n                    if (cur_urgency > max_urgency)\n                        max_urgency = cur_urgency;\n                }\n                switch (max_urgency) {\n                    case Urgency.LOW:\n                        this._blinking = false;\n                        this.set_applet_icon_symbolic_name(\"low-notif\");\n                        break;\n                    case Urgency.NORMAL:\n                    case Urgency.HIGH:\n                        this._blinking = false;\n                        this.set_applet_icon_symbolic_name(\"normal-notif\");\n                        break;\n                    case Urgency.CRITICAL:\n                        if (!this._blinking) {\n                            this._blinking = true;\n                            this.critical_blink();\n                        }\n                        break;\n                }\n            }\n            else { // There are no notifications.\n                this._blinking = false;\n                this.set_applet_label('');\n                this.set_applet_icon_symbolic_name(\"empty-notif\");\n                this.clear_action.actor.hide();\n                // @ts-ignore\n                if (!this.showEmptyTray) {\n                    this.actor.hide();\n                }\n            }\n            this.menu_label.label.set_text(stringify(count));\n            this._notificationbin.queue_relayout();\n        }\n        catch (e) {\n            global.logError(e);\n        }\n    }\n    _clear_all() {\n        const count = this.notifications.length;\n        if (count > 0) {\n            for (let i = count - 1; i >= 0; i--) {\n                this._notificationbin.remove_actor(this.notifications[i].actor);\n                this.notifications[i].destroy(NotificationDestroyedReason.DISMISSED);\n            }\n        }\n        this.notifications = [];\n        this.update_list();\n    }\n    _on_panel_edit_mode_changed() {\n        if (global.settings.get_boolean(PANEL_EDIT_MODE_KEY)) {\n            this.actor.show();\n        }\n        else {\n            this.update_list();\n        }\n    }\n    on_applet_added_to_panel() {\n        this.on_orientation_changed(this._orientation);\n    }\n    on_orientation_changed(orientation) {\n        this._orientation = orientation;\n        if (this.menu) {\n            this.menu.destroy();\n        }\n        this.menu = new AppletPopupMenu(this, orientation);\n        this.menuManager.addMenu(this.menu);\n        this._display();\n    }\n    on_applet_clicked(event) {\n        global.log('applet_clicked');\n        this._openMenu();\n    }\n    on_btn_open_system_settings_clicked() {\n        spawnCommandLine(\"cinnamon-settings notifications\");\n    }\n    _update_timestamp() {\n        let len = this.notifications.length;\n        if (len > 0) {\n            for (let i = 0; i < len; i++) {\n                let notification = this.notifications[i];\n                let orig_time = notification[\"_timestamp\"];\n                notification[\"_timeLabel\"].clutter_text.set_markup(timeify(orig_time));\n            }\n        }\n    }\n    critical_blink() {\n        if (!this._blinking)\n            return;\n        if (this._blink_toggle) {\n            this._applet_icon_box.child = this._crit_icon;\n        }\n        else {\n            this._applet_icon_box.child = this._alt_crit_icon;\n        }\n        this._blink_toggle = !this._blink_toggle;\n        Mainloop.timeout_add_seconds(1, Lang.bind(this, this.critical_blink));\n    }\n}\nfunction stringify(count) {\n    if (count === 0) {\n        return \"No notifications\";\n    }\n    else {\n        return `notifications ${count}`;\n    }\n}\nfunction timeify(orig_time) {\n    let settings = new Settings({ schema_id: 'org.cinnamon.desktop.interface' });\n    let use_24h = settings.get_boolean('clock-use-24h');\n    let now = new Date();\n    let diff = Math.floor((now.getTime() - orig_time.getTime()) / 1000); // get diff in seconds\n    let str;\n    if (use_24h) {\n        // @ts-ignore (toLocaleFormat exist on Date but is depreacted: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat )\n        str = orig_time.toLocaleFormat('%T');\n    }\n    else {\n        //@ts-ignore\n        str = orig_time.toLocaleFormat('%r');\n    }\n    return str;\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\nconst { BoxLayout: src_BoxLayout, Label: src_Label, Table, Button, Bin, Icon: src_Icon, IconType: src_IconType, Align: src_Align } = imports.gi.St;\nconst { NOTIFICATION } = imports.gi.Atk.Role;\nconst { WrapMode } = imports.gi.Pango;\nfunction main(args) {\n    const { orientation, panelHeight: panel_height, instanceId: instance_id } = args;\n    const reminderApplet = new NoticiationApplet(orientation, panel_height, instance_id);\n    return reminderApplet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///852\n")}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[852](0,__webpack_exports__,__webpack_require__),notificationApplet=__webpack_exports__})();