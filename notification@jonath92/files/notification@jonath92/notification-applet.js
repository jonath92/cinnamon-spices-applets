var notificationApplet;(()=>{"use strict";var __webpack_modules__={852:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"main\": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/Applet.ts\nconst { TextIconApplet, AllowedLayout, AppletPopupMenu } = imports.ui.applet;\nconst { PopupMenuManager, PopupMenuItem, PopupSeparatorMenuItem } = imports.ui.popupMenu;\nconst { BoxLayout, Label, Side, ScrollView, Align, Icon, IconType, TextDirection, Button, Table, FocusManager, Bin } = imports.gi.St;\nconst { messageTray } = imports.ui.main;\nconst { Urgency, NotificationDestroyedReason } = imports.ui.messageTray;\nconst Mainloop = imports.mainloop;\nconst Lang = imports.lang;\nconst { Role } = imports.gi.Atk;\nconst { WrapMode, parse_markup, find_base_dir, Direction, EllipsizeMode } = imports.gi.Pango;\nconst { spawnCommandLine, spawn, findUrls } = imports.misc.util;\nconst { Settings } = imports.gi.Gio;\nconst { PolicyType, IconTheme } = imports.gi.Gtk;\nconst { Clone } = imports.gi.Clutter;\nconst { app_info_launch_default_for_uri } = imports.gi.Gio;\nconst { markup_escape_text } = imports.gi.GLib;\nconst { Cursor } = imports.gi.Cinnamon;\nconst PANEL_EDIT_MODE_KEY = \"panel-edit-mode\";\nconst Params = imports.misc.params;\nconst NOTIFICATION_IMAGE_SIZE = 125;\nconst NOTIFICATION_IMAGE_OPACITY = 230; // 0 - 255\nclass NoticiationApplet extends TextIconApplet {\n    constructor(orientation, panel_height, instance_id) {\n        super(orientation, panel_height, instance_id);\n        this.setAllowedLayout(AllowedLayout.BOTH);\n        this._orientation = orientation;\n        this.menuManager = new PopupMenuManager(this);\n        this.notifications = [];\n        // messageTray.connect('notify-applet-update', (actor, notification) => this._notification_added(actor, notification))\n        global.settings.connect('changed::' + PANEL_EDIT_MODE_KEY, Lang.bind(this, this._on_panel_edit_mode_changed));\n        this._blinking = false;\n        this._blink_toggle = false;\n    }\n    _openMenu() {\n        this._update_timestamp();\n        this.menu.toggle();\n    }\n    _display() {\n        this.set_applet_icon_symbolic_name('empty-notif');\n        this.set_applet_tooltip('Notifications');\n        // Setup the notification container.\n        this._maincontainer = new BoxLayout({\n            name: 'traycontainer',\n            vertical: true\n        });\n        global.log('_display called');\n        this._notificationbin = new BoxLayout({ vertical: true });\n        this.button_label_box = new BoxLayout();\n        // Setup the tray icon.\n        this.menu_label = new PopupMenuItem(stringify(this.notifications.length));\n        this.menu_label.actor.reactive = false;\n        this.menu_label.actor.can_focus = false;\n        this.menu_label.label.add_style_class_name('popup-subtitle-menu-item');\n        this.clear_separator = new PopupSeparatorMenuItem();\n        this.clear_action = new PopupMenuItem(\"Clear notifications\");\n        this.clear_action.connect('activate', Lang.bind(this, this._clear_all));\n        this.clear_action.actor.hide();\n        if (this._orientation == Side.BOTTOM) {\n            this.menu.addMenuItem(this.menu_label);\n            this.menu.addActor(this._maincontainer);\n            this.menu.addMenuItem(this.clear_separator);\n            this.menu.addMenuItem(this.clear_action);\n        }\n        else {\n            this.menu.addMenuItem(this.clear_action);\n            this.menu.addMenuItem(this.clear_separator);\n            this.menu.addMenuItem(this.menu_label);\n            this.menu.addActor(this._maincontainer);\n        }\n        this.scrollview = new ScrollView({\n            x_fill: true,\n            y_fill: true,\n            y_align: Align.START,\n            style_class: \"vfade\",\n        });\n        this._maincontainer.add(this.scrollview);\n        this.scrollview.add_actor(this._notificationbin);\n        this.scrollview.set_policy(PolicyType.NEVER, PolicyType.AUTOMATIC);\n        let vscroll = this.scrollview.get_vscroll_bar();\n        vscroll.connect('scroll-start', () => {\n            this.menu.passEvents = true;\n        });\n        vscroll.connect('scroll-stop', () => {\n            this.menu.passEvents = false;\n        });\n        this._crit_icon = new Icon({\n            icon_name: 'critical-notif',\n            icon_type: IconType.SYMBOLIC,\n            reactive: true,\n            track_hover: true,\n            style_class: 'system-status-icon'\n        });\n        this._alt_crit_icon = new Icon({\n            icon_name: 'alt-critical-notif',\n            icon_type: IconType.SYMBOLIC,\n            reactive: true,\n            track_hover: true,\n            style_class: 'system-status-icon'\n        });\n        this._on_panel_edit_mode_changed();\n        this.menu.addSettingsAction(\"Notification Settings\", 'notifications');\n    }\n    _notification_added(actor, notification) {\n        global.log('notificaton added');\n        // @ts-ignore\n        const clone = new Clone({\n            source: notification.actor\n        });\n        notification.actor.unparent();\n        let existing_index = this.notifications.indexOf(notification);\n        if (existing_index != -1) { // This notification is already listed.\n            if (notification[\"_destroyed\"]) {\n                this.notifications.splice(existing_index, 1);\n            }\n            else {\n                notification[\"_inNotificationBin\"] = true;\n                global.reparentActor(notification.actor, this._notificationbin);\n                notification[\"_timeLabel\"].show();\n            }\n            this.update_list();\n            return;\n        }\n        else if (notification[\"_destroyed\"]) {\n            return;\n        }\n        // Add notification to list.\n        notification[\"_inNotificationBin\"] = true;\n        this.notifications.push(notification);\n        // Steal the notication panel.\n        // @ts-ignore\n        this._notificationbin.add(clone);\n        // @ts-ignore\n        notification.actor._parent_container = this._notificationbin;\n        notification.actor.add_style_class_name('notification-applet-padding');\n        // Register for destruction.\n        // @ts-ignore\n        notification.connect('scrolling-changed', (notif, scrolling) => { this.menu.passEvents = scrolling; });\n        notification.connect('destroy', () => {\n            let i = this.notifications.indexOf(notification);\n            if (i != -1)\n                this.notifications.splice(i, 1);\n            this.update_list();\n        });\n        notification[\"_timeLabel\"].show();\n        this.update_list();\n    }\n    update_list() {\n        try {\n            let count = this.notifications.length;\n            if (count > 0) { // There are notifications.\n                this.actor.show();\n                this.clear_action.actor.show();\n                this.set_applet_label(count.toString());\n                // Find max urgency and derive list icon.\n                let max_urgency = -1;\n                for (let i = 0; i < count; i++) {\n                    let cur_urgency = this.notifications[i].urgency;\n                    if (cur_urgency > max_urgency)\n                        max_urgency = cur_urgency;\n                }\n                switch (max_urgency) {\n                    case Urgency.LOW:\n                        this._blinking = false;\n                        this.set_applet_icon_symbolic_name(\"low-notif\");\n                        break;\n                    case Urgency.NORMAL:\n                    case Urgency.HIGH:\n                        this._blinking = false;\n                        this.set_applet_icon_symbolic_name(\"normal-notif\");\n                        break;\n                    case Urgency.CRITICAL:\n                        if (!this._blinking) {\n                            this._blinking = true;\n                            this.critical_blink();\n                        }\n                        break;\n                }\n            }\n            else { // There are no notifications.\n                this._blinking = false;\n                this.set_applet_label('');\n                this.set_applet_icon_symbolic_name(\"empty-notif\");\n                this.clear_action.actor.hide();\n                // @ts-ignore\n                // if (!this.showEmptyTray) {\n                //     this.actor.hide();\n                // }\n            }\n            this.menu_label.label.set_text(stringify(count));\n            this._notificationbin.queue_relayout();\n        }\n        catch (e) {\n            global.logError(e);\n        }\n    }\n    _clear_all() {\n        const count = this.notifications.length;\n        if (count > 0) {\n            for (let i = count - 1; i >= 0; i--) {\n                this._notificationbin.remove_actor(this.notifications[i].actor);\n                this.notifications[i].destroy(NotificationDestroyedReason.DISMISSED);\n            }\n        }\n        this.notifications = [];\n        this.update_list();\n    }\n    _on_panel_edit_mode_changed() {\n        if (global.settings.get_boolean(PANEL_EDIT_MODE_KEY)) {\n            this.actor.show();\n        }\n        else {\n            this.update_list();\n        }\n    }\n    on_applet_added_to_panel() {\n        this.on_orientation_changed(this._orientation);\n    }\n    on_orientation_changed(orientation) {\n        this._orientation = orientation;\n        if (this.menu) {\n            this.menu.destroy();\n        }\n        this.menu = new AppletPopupMenu(this, orientation);\n        this.menuManager.addMenu(this.menu);\n        this._display();\n    }\n    on_applet_clicked(event) {\n        global.log('applet_clicked');\n        //this._notificationbin.remove_all_children()\n        const notificiaton = new Notification('Title', 'Body');\n        global.log(notificiaton);\n        this._notificationbin.add_child(notificiaton.actor);\n        this._openMenu();\n    }\n    on_btn_open_system_settings_clicked() {\n        spawnCommandLine(\"cinnamon-settings notifications\");\n    }\n    _update_timestamp() {\n        let len = this.notifications.length;\n        if (len > 0) {\n            for (let i = 0; i < len; i++) {\n                let notification = this.notifications[i];\n                let orig_time = notification[\"_timestamp\"];\n                notification[\"_timeLabel\"].clutter_text.set_markup(timeify(orig_time));\n            }\n        }\n    }\n    critical_blink() {\n        if (!this._blinking)\n            return;\n        if (this._blink_toggle) {\n            this._applet_icon_box.child = this._crit_icon;\n        }\n        else {\n            this._applet_icon_box.child = this._alt_crit_icon;\n        }\n        this._blink_toggle = !this._blink_toggle;\n        Mainloop.timeout_add_seconds(1, Lang.bind(this, this.critical_blink));\n    }\n}\nfunction stringify(count) {\n    if (count === 0) {\n        return \"No notifications\";\n    }\n    else {\n        return `notifications ${count}`;\n    }\n}\nfunction timeify(orig_time) {\n    let settings = new Settings({ schema_id: 'org.cinnamon.desktop.interface' });\n    let use_24h = settings.get_boolean('clock-use-24h');\n    let now = new Date();\n    let diff = Math.floor((now.getTime() - orig_time.getTime()) / 1000); // get diff in seconds\n    let str;\n    if (use_24h) {\n        // @ts-ignore (toLocaleFormat exist on Date but is depreacted: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat )\n        str = orig_time.toLocaleFormat('%T');\n    }\n    else {\n        //@ts-ignore\n        str = orig_time.toLocaleFormat('%r');\n    }\n    return str;\n}\nclass Notification {\n    constructor(title, body, params) {\n        this.title = title;\n        this.resident = false;\n        this.isTransient = false;\n        this.silent = false;\n        this._destroyed = false;\n        this._useActionIcons = false;\n        this._titleDirection = TextDirection.DEFAULT;\n        this._scrollArea = null;\n        this._actionArea = null;\n        this._imageBin = null;\n        this._timestamp = new Date();\n        this._inNotificationBin = false;\n        //source.connect('destroy', (source, reason) => this.destroy(reason))\n        this.actor = new Button({\n            accessible_role: Role.NOTIFICATION,\n            style_class: 'notification-applet-padding'\n        });\n        // @ts-ignore\n        this.actor._parent_container = null;\n        //this.actor.connect('clicked', () => this._onClicked())\n        //this.actor.connect('destroy', () => this._onDestroy())\n        this._table = new Table({\n            name: 'notification',\n            reactive: true\n        });\n        this.actor.set_child(this._table);\n        this._buttonFocusManager = FocusManager.get_for_stage(global.stage);\n        // // the banner box is now just a simple vbox.\n        // // The first line should have the time, and the second the title.\n        // // Time only shown inside message tray.\n        this._bannerBox = new BoxLayout({\n            vertical: true,\n            style: 'spacing: 4px'\n        });\n        // TODO: I think this lead to the warning: \n        // (cinnamon:12352): St-WARNING **: 11:40:22.623: StTable: col-span exceeds number of columns\n        this._table.add(this._bannerBox, {\n            row: 0,\n            col: 1,\n            col_span: 2,\n            x_expand: false,\n            y_expand: false,\n            y_fill: false\n        });\n        this._timeLabel = new Label({\n            show_on_set_parent: false\n        });\n        this._titleLabel = new Label();\n        this._titleLabel.clutter_text.line_wrap = true;\n        this._titleLabel.clutter_text.line_wrap_mode = WrapMode.WORD_CHAR;\n        this._bannerBox.add_actor(this._timeLabel);\n        this._bannerBox.add_actor(this._titleLabel);\n        this._table.add(new Bin(), {\n            row: 2,\n            col: 2,\n            y_expand: false,\n            y_fill: false\n        });\n        const icon = new Icon({\n            icon_name: 'window-close',\n            icon_type: IconType.SYMBOLIC,\n            icon_size: 16\n        });\n        const closeButton = new Button({\n            child: icon,\n            opacity: 128\n        });\n        //closeButton.connect('clicked', () => this._destroy())\n        closeButton.connect('notify::hover', () => closeButton.opacity = closeButton.hover ? 255 : 128);\n        this._table.add(closeButton, {\n            row: 0,\n            col: 3,\n            x_expand: false,\n            y_expand: false,\n            y_fill: false,\n            y_align: Align.START\n        });\n        // // set icon, title, body\n        this.update(title, body, params);\n    }\n    update(title, body, params) {\n        this._timestamp = new Date();\n        this._inNotificationBin = false;\n        params = Params.parse(params, {\n            icon: null,\n            titleMarkup: false,\n            bodyMarkup: false,\n            silent: false\n        });\n        this.silent = params.silent;\n        if (this._icon && params.icon) {\n            this._icon.destroy();\n            this._icon = null;\n        }\n        // if (!this._icon) {\n        //     this._icon = params.icon;\n        //     this._table.add(this._icon, {\n        //         row: 0,\n        //         col: 0,\n        //         x_expand: false,\n        //         y_expand: false,\n        //         y_fill: false,\n        //         y_align: Align.START\n        //     })\n        // }\n        if (typeof (title) === 'string') {\n            this.title = _fixMarkup(title.replace(/\\n/g, ' '), params.titleMarkup);\n        }\n        else {\n            this.title = \"\";\n        }\n        this._titleLabel.clutter_text.set_markup('<b>' + this.title + '</b>');\n        this._timeLabel.clutter_text.set_markup(this._timestamp.toLocaleTimeString());\n        // this._timeLabel.hide();\n        // if (find_base_dir(title, 1) === Direction.RTL)\n        //     this._titleDirection = TextDirection.RTL\n        // else\n        //     this._titleDirection = TextDirection.LTR\n        // // Let the title's text direction control the overall direction\n        // // of the notification - in case where different scripts are used\n        // // in the notification, this is the right thing for the icon, and\n        // // arguably for action buttons as well. Labels other than the title\n        // // will be allocated at the available width, so that their alignment\n        // // is done correctly automatically.\n        // this._table.set_direction(this._titleDirection);\n        // // TODO: hier weitermachen\n        this._setBodyArea(body, params.bodyMarkup);\n    }\n    _setBodyArea(text, allowMarkup) {\n        if (text) {\n            if (!this._scrollArea) {\n                /* FIXME: vscroll should be enabled\n                 * -vfade covers too much for this size of scrollable\n                 * -scrollview min-height is broken inside tray with a scrollview\n                 *\n                 * TODO: when scrollable:\n                 *\n                 * applet connects to this signal to enable captured-event passthru so you can grab the scrollbar:\n                 * let vscroll = this._scrollArea.get_vscroll_bar();\n                 * vscroll.connect('scroll-start', () => { this.emit('scrolling-changed', true) });\n                 * vscroll.connect('scroll-stop', () => { this.emit('scrolling-changed', false) });\n                 *\n                 * `enable_mouse_scrolling` makes it difficult to scroll when there are many notifications\n                 * in the tray because most of the area is these smaller scrollviews which capture the event.\n                 * ideally, this should only be disabled when the notification is in the tray and there are\n                 * many notifications.\n                 */\n                this._scrollArea = new ScrollView({\n                    name: 'notification-scrollview',\n                    vscrollbar_policy: PolicyType.NEVER,\n                    hscrollbar_policy: PolicyType.NEVER,\n                    enable_mouse_scrolling: false /*,\n                                                       style_class: 'vfade'*/\n                });\n                this._table.add(this._scrollArea, {\n                    row: 1,\n                    col: 2\n                });\n                let content = new BoxLayout({\n                    name: 'notification-body',\n                    vertical: true\n                });\n                this._scrollArea.add_actor(content);\n                // body label\n                this._bodyUrlHighlighter = new URLHighlighter(\"\", true, false);\n                content.add(this._bodyUrlHighlighter.actor);\n            }\n            this._bodyUrlHighlighter.setMarkup(text, allowMarkup);\n        }\n        else {\n            if (this._scrollArea) {\n                this._scrollArea.destroy();\n                this._scrollArea = null;\n                this._bodyUrlHighlighter = null;\n            }\n        }\n        this._updateLayout();\n    }\n    setIconVisible(visible) {\n        if (this._icon)\n            this._icon.visible = visible;\n    }\n    /**\n  * scrollTo:\n  * @side (St.Side): St.Side.TOP or St.Side.BOTTOM\n  *\n  * Scrolls the content area (if scrollable) to the indicated edge\n  */\n    scrollTo(side) {\n        if (!this._scrollArea)\n            return;\n        let adjustment = this._scrollArea.vscroll.adjustment;\n        if (side == Side.TOP)\n            adjustment.value = adjustment.lower;\n        else if (side == Side.BOTTOM)\n            adjustment.value = adjustment.upper;\n    }\n    _updateLayout() {\n        if (this._imageBin || this._scrollArea || this._actionArea) {\n            this._table.add_style_class_name('multi-line-notification');\n        }\n        else {\n            this._table.remove_style_class_name('multi-line-notification');\n        }\n        if (this._imageBin) {\n            this._table.add_style_class_name('notification-with-image');\n        }\n        else {\n            this._table.remove_style_class_name('notification-with-image');\n        }\n        if (this._scrollArea)\n            this._table.child_set(this._scrollArea, {\n                col: this._imageBin ? 2 : 1,\n                col_span: this._imageBin ? 2 : 3\n            });\n        if (this._actionArea)\n            this._table.child_set(this._actionArea, {\n                col: this._imageBin ? 2 : 1,\n                col_span: this._imageBin ? 2 : 3\n            });\n    }\n    // setImage(image) {\n    //     if (this._imageBin)\n    //         this.unsetImage();\n    //     if (!image)\n    //         return;\n    //     this._imageBin = new Bin({\n    //         child: image,\n    //         opacity: NOTIFICATION_IMAGE_OPACITY\n    //     });\n    //     this._table.add(this._imageBin, {\n    //         row: 1,\n    //         col: 1,\n    //         row_span: 2,\n    //         x_expand: false,\n    //         y_expand: false,\n    //         x_fill: false,\n    //         y_fill: false\n    //     });\n    //     this._updateLayout();\n    // }\n    unsetImage() {\n        if (!this._imageBin)\n            return;\n        this._imageBin.destroy();\n        this._imageBin = null;\n        this._updateLayout();\n    }\n    /**\n     * addButton:\n     * @id (number): the action ID\n     * @label (string): the label for the action's button\n     *\n     * Adds a button with the given @label to the notification. All\n     * action buttons will appear in a single row at the bottom of\n     * the notification.\n     *\n     * If the button is clicked, the notification will emit the\n     * %action-invoked signal with @id as a parameter.\n     */\n    addButton(id, label) {\n        if (!this._actionArea) {\n            this._actionArea = new BoxLayout({\n                name: 'notification-actions'\n            });\n            this._table.add(this._actionArea, {\n                row: 2,\n                col: 1,\n                col_span: 3,\n                x_expand: true,\n                y_expand: false,\n                x_fill: true,\n                y_fill: false,\n                x_align: Align.START\n            });\n        }\n        let button = new Button({ can_focus: true });\n        if (this._useActionIcons\n            && id.endsWith(\"-symbolic\")\n            && IconTheme.get_default().has_icon(id)) {\n            button.add_style_class_name('notification-icon-button');\n            button.child = new Icon({ icon_name: id });\n        }\n        else {\n            button.add_style_class_name('notification-button');\n            button.label = label;\n        }\n        if (this._actionArea.get_n_children() > 0)\n            this._buttonFocusManager.remove_group(this._actionArea);\n        this._actionArea.add(button);\n        this._buttonFocusManager.add_group(this._actionArea);\n        //button.connect('clicked', Lang.bind(this, this._onActionInvoked, id));\n        this._updateLayout();\n    }\n    /**\n     * clearButtons:\n     *\n     * Removes all buttons.\n     */\n    clearButtons() {\n        if (!this._actionArea)\n            return;\n        this._actionArea.destroy();\n        this._actionArea = null;\n        this._updateLayout();\n    }\n    setUrgency(urgency) {\n        this.urgency = urgency;\n    }\n    setResident(resident) {\n        this.resident = resident;\n    }\n    setTransient(isTransient) {\n        this.isTransient = isTransient;\n    }\n    setUseActionIcons(useIcons) {\n        this._useActionIcons = useIcons;\n    }\n    _onActionInvoked(actor, mouseButtonClicked, id) {\n        if (!this.resident) {\n        }\n    }\n}\nfunction _fixMarkup(text, allowMarkup) {\n    if (allowMarkup) {\n        // Support &amp;, &quot;, &apos;, &lt; and &gt;, escape all other\n        // occurrences of '&'.\n        let _text = text.replace(/&(?!amp;|quot;|apos;|lt;|gt;)/g, '&amp;');\n        // Support <b>, <i>, and <u>, escape anything else\n        // so it displays as raw markup.\n        _text = _text.replace(/<(?!\\/?[biu]>)/g, '&lt;');\n        try {\n            parse_markup(_text, -1, '');\n            return _text;\n        }\n        catch (e) { }\n    }\n    // !allowMarkup, or invalid markup\n    return markup_escape_text(text, -1);\n}\nclass URLHighlighter {\n    constructor(text, lineWrap, allowMarkup) {\n        if (!text)\n            text = '';\n        this.actor = new Label({\n            reactive: true,\n            style_class: 'url-highlighter'\n        });\n        this._linkColor = '#ccccff';\n        this.actor.connect('style-changed', Lang.bind(this, function () {\n            let [hasColor, color] = this.actor.get_theme_node().lookup_color('link-color', false);\n            if (hasColor) {\n                let linkColor = color.to_string().substr(0, 7);\n                if (linkColor != this._linkColor) {\n                    this._linkColor = linkColor;\n                    this._highlightUrls();\n                }\n            }\n        }));\n        if (!lineWrap) {\n            this.actor.clutter_text.line_wrap = true;\n            this.actor.clutter_text.line_wrap_mode = WrapMode.WORD_CHAR;\n            this.actor.clutter_text.ellipsize = EllipsizeMode.NONE;\n        }\n        this.setMarkup(text, allowMarkup);\n        this.actor.connect('button-press-event', Lang.bind(this, function (actor, event) {\n            // Don't try to URL highlight when invisible.\n            // The MessageTray doesn't actually hide us, so\n            // we need to check for paint opacities as well.\n            if (!actor.visible || actor.get_paint_opacity() == 0)\n                return false;\n            // Keep Notification.actor from seeing this and taking\n            // a pointer grab, which would block our button-release-event\n            // handler, if an URL is clicked\n            return this._findUrlAtPos(event) != -1;\n        }));\n        this.actor.connect('button-release-event', Lang.bind(this, function (actor, event) {\n            if (!actor.visible || actor.get_paint_opacity() == 0)\n                return false;\n            let urlId = this._findUrlAtPos(event);\n            if (urlId != -1) {\n                let url = this._urls[urlId].url;\n                if (url.indexOf(':') == -1)\n                    url = 'http://' + url;\n                try {\n                    app_info_launch_default_for_uri(url, global.create_app_launch_context());\n                    return true;\n                }\n                catch (e) {\n                    // TODO: remove this after gnome 3 release\n                    spawn(['gio', 'open', url]);\n                    return true;\n                }\n            }\n            return false;\n        }));\n        this.actor.connect('motion-event', Lang.bind(this, function (actor, event) {\n            if (!actor.visible || actor.get_paint_opacity() == 0)\n                return false;\n            let urlId = this._findUrlAtPos(event);\n            if (urlId != -1 && !this._cursorChanged) {\n                global.set_cursor(Cursor.POINTING_HAND);\n                this._cursorChanged = true;\n            }\n            else if (urlId == -1) {\n                global.unset_cursor();\n                this._cursorChanged = false;\n            }\n            return false;\n        }));\n        this.actor.connect('leave-event', Lang.bind(this, function () {\n            if (!this.actor.visible || this.actor.get_paint_opacity() == 0)\n                return;\n            if (this._cursorChanged) {\n                this._cursorChanged = false;\n                global.unset_cursor();\n            }\n        }));\n    }\n    setMarkup(text, allowMarkup) {\n        text = text ? _fixMarkup(text, allowMarkup) : '';\n        this._text = text;\n        this.actor.clutter_text.set_markup(text);\n        this._urls = findUrls(this.actor.clutter_text.text);\n    }\n    _highlightUrls() {\n        // text here contain markup\n        let urls = findUrls(this._text);\n        let markup = '';\n        let pos = 0;\n        for (let i = 0; i < urls.length; i++) {\n            let url = urls[i];\n            let str = this._text.substr(pos, url.pos - pos);\n            markup += str + '<span foreground=\"' + this._linkColor + '\"><u>' + url.url + '</u></span>';\n            pos = url.pos + url.url.length;\n        }\n        markup += this._text.substr(pos);\n        this.actor.clutter_text.set_markup(markup);\n    }\n    _findUrlAtPos(event) {\n        if (!this._urls.length)\n            return -1;\n        let success;\n        let [x, y] = event.get_coords();\n        let ct = this.actor.clutter_text;\n        [success, x, y] = ct.transform_stage_point(x, y);\n        if (success && x >= 0 && x <= ct.width\n            && y >= 0 && y <= ct.height) {\n            let pos = ct.coords_to_position(x, y);\n            for (let i = 0; i < this._urls.length; i++) {\n                let url = this._urls[i];\n                if (pos >= url.pos && pos <= url.pos + url.url.length)\n                    return i;\n            }\n        }\n        return -1;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\nconst { BoxLayout: src_BoxLayout, Label: src_Label, Table: src_Table, Button: src_Button, Bin: src_Bin, Icon: src_Icon, IconType: src_IconType, Align: src_Align } = imports.gi.St;\nconst { NOTIFICATION } = imports.gi.Atk.Role;\nconst { WrapMode: src_WrapMode } = imports.gi.Pango;\nfunction main(args) {\n    const { orientation, panelHeight: panel_height, instanceId: instance_id } = args;\n    const reminderApplet = new NoticiationApplet(orientation, panel_height, instance_id);\n    return reminderApplet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///852\n")}},__webpack_require__={d:(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},o:(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[852](0,__webpack_exports__,__webpack_require__),notificationApplet=__webpack_exports__})();